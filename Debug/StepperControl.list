
StepperControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08006c90  08006c90  00016c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d58  08006d58  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006d58  08006d58  00016d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d60  08006d60  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d60  08006d60  00016d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d64  08006d64  00016d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000088  08006df0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08006df0  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153b8  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002647  00000000  00000000  00035470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00037ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  00038d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002902a  00000000  00000000  00039f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ea6  00000000  00000000  00062f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107703  00000000  00000000  00076e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017e543  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c8  00000000  00000000  0017e598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c78 	.word	0x08006c78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08006c78 	.word	0x08006c78

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fef7 	bl	8001370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f95f 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fbb5 	bl	8000cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 800058a:	f000 fb95 	bl	8000cb8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800058e:	f000 fb63 	bl	8000c58 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000592:	f000 f9cd 	bl	8000930 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000596:	f000 fa63 	bl	8000a60 <MX_TIM1_Init>
  MX_TIM2_Init();
 800059a:	f000 fab5 	bl	8000b08 <MX_TIM2_Init>
  MX_TIM4_Init();
 800059e:	f000 fb01 	bl	8000ba4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80005a2:	4896      	ldr	r0, [pc, #600]	; (80007fc <main+0x284>)
 80005a4:	f004 f9a0 	bl	80048e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80005a8:	4895      	ldr	r0, [pc, #596]	; (8000800 <main+0x288>)
 80005aa:	f004 f99d 	bl	80048e8 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, raw, 3);
 80005ae:	2203      	movs	r2, #3
 80005b0:	4994      	ldr	r1, [pc, #592]	; (8000804 <main+0x28c>)
 80005b2:	4895      	ldr	r0, [pc, #596]	; (8000808 <main+0x290>)
 80005b4:	f001 faa8 	bl	8001b08 <HAL_ADC_Start_DMA>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2108      	movs	r1, #8
 80005bc:	4893      	ldr	r0, [pc, #588]	; (800080c <main+0x294>)
 80005be:	f002 fdfd 	bl	80031bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2120      	movs	r1, #32
 80005c6:	4891      	ldr	r0, [pc, #580]	; (800080c <main+0x294>)
 80005c8:	f002 fdf8 	bl	80031bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d2:	488e      	ldr	r0, [pc, #568]	; (800080c <main+0x294>)
 80005d4:	f002 fdf2 	bl	80031bc <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80005d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005dc:	f000 ff44 	bl	8001468 <HAL_Delay>
  while((raw[0] > slider_start)||(raw[1] < wing2_start)||(raw[2] > wing1_start)||(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET))
 80005e0:	e045      	b.n	800066e <main+0xf6>
	{
	  HAL_Delay(100);
 80005e2:	2064      	movs	r0, #100	; 0x64
 80005e4:	f000 ff40 	bl	8001468 <HAL_Delay>
    if(raw[0] > slider_start) clk_toggle1 = 1;
 80005e8:	4b86      	ldr	r3, [pc, #536]	; (8000804 <main+0x28c>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b88      	ldr	r3, [pc, #544]	; (8000810 <main+0x298>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dd03      	ble.n	80005fe <main+0x86>
 80005f6:	4b87      	ldr	r3, [pc, #540]	; (8000814 <main+0x29c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	e002      	b.n	8000604 <main+0x8c>
    else clk_toggle1 = 0;
 80005fe:	4b85      	ldr	r3, [pc, #532]	; (8000814 <main+0x29c>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
    if(raw[1] < wing2_start) clk_toggle2 = 1;
 8000604:	4b7f      	ldr	r3, [pc, #508]	; (8000804 <main+0x28c>)
 8000606:	885b      	ldrh	r3, [r3, #2]
 8000608:	461a      	mov	r2, r3
 800060a:	4b83      	ldr	r3, [pc, #524]	; (8000818 <main+0x2a0>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	429a      	cmp	r2, r3
 8000610:	da03      	bge.n	800061a <main+0xa2>
 8000612:	4b82      	ldr	r3, [pc, #520]	; (800081c <main+0x2a4>)
 8000614:	2201      	movs	r2, #1
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	e002      	b.n	8000620 <main+0xa8>
    else clk_toggle2 = 0;
 800061a:	4b80      	ldr	r3, [pc, #512]	; (800081c <main+0x2a4>)
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
    if(raw[2] > wing1_start) clk_toggle3 = 1;
 8000620:	4b78      	ldr	r3, [pc, #480]	; (8000804 <main+0x28c>)
 8000622:	889b      	ldrh	r3, [r3, #4]
 8000624:	461a      	mov	r2, r3
 8000626:	4b7e      	ldr	r3, [pc, #504]	; (8000820 <main+0x2a8>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	429a      	cmp	r2, r3
 800062c:	dd03      	ble.n	8000636 <main+0xbe>
 800062e:	4b7d      	ldr	r3, [pc, #500]	; (8000824 <main+0x2ac>)
 8000630:	2201      	movs	r2, #1
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	e002      	b.n	800063c <main+0xc4>
    else clk_toggle3 = 0; 
 8000636:	4b7b      	ldr	r3, [pc, #492]	; (8000824 <main+0x2ac>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
	sprintf (msg, "ADC value channel 1: %d, ADC value channel 2: %d, ADC value channel 3: %d\n\r", (int)raw[0], (int)raw[1], (int)raw[2]);
 800063c:	4b71      	ldr	r3, [pc, #452]	; (8000804 <main+0x28c>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b70      	ldr	r3, [pc, #448]	; (8000804 <main+0x28c>)
 8000644:	885b      	ldrh	r3, [r3, #2]
 8000646:	4619      	mov	r1, r3
 8000648:	4b6e      	ldr	r3, [pc, #440]	; (8000804 <main+0x28c>)
 800064a:	889b      	ldrh	r3, [r3, #4]
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	460b      	mov	r3, r1
 8000650:	4975      	ldr	r1, [pc, #468]	; (8000828 <main+0x2b0>)
 8000652:	4876      	ldr	r0, [pc, #472]	; (800082c <main+0x2b4>)
 8000654:	f005 fee2 	bl	800641c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000658:	4874      	ldr	r0, [pc, #464]	; (800082c <main+0x2b4>)
 800065a:	f7ff fdb9 	bl	80001d0 <strlen>
 800065e:	4603      	mov	r3, r0
 8000660:	b29a      	uxth	r2, r3
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	4971      	ldr	r1, [pc, #452]	; (800082c <main+0x2b4>)
 8000668:	4871      	ldr	r0, [pc, #452]	; (8000830 <main+0x2b8>)
 800066a:	f005 fa1f 	bl	8005aac <HAL_UART_Transmit>
  while((raw[0] > slider_start)||(raw[1] < wing2_start)||(raw[2] > wing1_start)||(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET))
 800066e:	4b65      	ldr	r3, [pc, #404]	; (8000804 <main+0x28c>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	4b66      	ldr	r3, [pc, #408]	; (8000810 <main+0x298>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	429a      	cmp	r2, r3
 800067a:	dcb2      	bgt.n	80005e2 <main+0x6a>
 800067c:	4b61      	ldr	r3, [pc, #388]	; (8000804 <main+0x28c>)
 800067e:	885b      	ldrh	r3, [r3, #2]
 8000680:	461a      	mov	r2, r3
 8000682:	4b65      	ldr	r3, [pc, #404]	; (8000818 <main+0x2a0>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	429a      	cmp	r2, r3
 8000688:	dbab      	blt.n	80005e2 <main+0x6a>
 800068a:	4b5e      	ldr	r3, [pc, #376]	; (8000804 <main+0x28c>)
 800068c:	889b      	ldrh	r3, [r3, #4]
 800068e:	461a      	mov	r2, r3
 8000690:	4b63      	ldr	r3, [pc, #396]	; (8000820 <main+0x2a8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	dca4      	bgt.n	80005e2 <main+0x6a>
 8000698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069c:	4865      	ldr	r0, [pc, #404]	; (8000834 <main+0x2bc>)
 800069e:	f002 fd75 	bl	800318c <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d09c      	beq.n	80005e2 <main+0x6a>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
//	  delay_us(600);
	  HAL_Delay(100);
 80006a8:	2064      	movs	r0, #100	; 0x64
 80006aa:	f000 fedd 	bl	8001468 <HAL_Delay>

	  sprintf (msg, "ADC value channel 1: %d, ADC value channel 2: %d, ADC value channel 3: %d\n\r", (int)raw[0], (int)raw[1], (int)raw[2]);
 80006ae:	4b55      	ldr	r3, [pc, #340]	; (8000804 <main+0x28c>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b53      	ldr	r3, [pc, #332]	; (8000804 <main+0x28c>)
 80006b6:	885b      	ldrh	r3, [r3, #2]
 80006b8:	4619      	mov	r1, r3
 80006ba:	4b52      	ldr	r3, [pc, #328]	; (8000804 <main+0x28c>)
 80006bc:	889b      	ldrh	r3, [r3, #4]
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	460b      	mov	r3, r1
 80006c2:	4959      	ldr	r1, [pc, #356]	; (8000828 <main+0x2b0>)
 80006c4:	4859      	ldr	r0, [pc, #356]	; (800082c <main+0x2b4>)
 80006c6:	f005 fea9 	bl	800641c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80006ca:	4858      	ldr	r0, [pc, #352]	; (800082c <main+0x2b4>)
 80006cc:	f7ff fd80 	bl	80001d0 <strlen>
 80006d0:	4603      	mov	r3, r0
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	4954      	ldr	r1, [pc, #336]	; (800082c <main+0x2b4>)
 80006da:	4855      	ldr	r0, [pc, #340]	; (8000830 <main+0x2b8>)
 80006dc:	f005 f9e6 	bl	8005aac <HAL_UART_Transmit>

	  clk_toggle1 = 1;
 80006e0:	4b4c      	ldr	r3, [pc, #304]	; (8000814 <main+0x29c>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
	  if((raw[0] > (slider_end - 100))&&(raw[0] < (slider_end + 100))) clk_toggle1 = 0;
 80006e6:	4b54      	ldr	r3, [pc, #336]	; (8000838 <main+0x2c0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	3b63      	subs	r3, #99	; 0x63
 80006ec:	4a45      	ldr	r2, [pc, #276]	; (8000804 <main+0x28c>)
 80006ee:	8812      	ldrh	r2, [r2, #0]
 80006f0:	4293      	cmp	r3, r2
 80006f2:	dc0a      	bgt.n	800070a <main+0x192>
 80006f4:	4b50      	ldr	r3, [pc, #320]	; (8000838 <main+0x2c0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	3363      	adds	r3, #99	; 0x63
 80006fa:	4a42      	ldr	r2, [pc, #264]	; (8000804 <main+0x28c>)
 80006fc:	8812      	ldrh	r2, [r2, #0]
 80006fe:	4293      	cmp	r3, r2
 8000700:	db03      	blt.n	800070a <main+0x192>
 8000702:	4b44      	ldr	r3, [pc, #272]	; (8000814 <main+0x29c>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	e018      	b.n	800073c <main+0x1c4>
	  else if(raw[0] > slider_end)
 800070a:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <main+0x28c>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	4b49      	ldr	r3, [pc, #292]	; (8000838 <main+0x2c0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	dd05      	ble.n	8000724 <main+0x1ac>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	2108      	movs	r1, #8
 800071c:	483b      	ldr	r0, [pc, #236]	; (800080c <main+0x294>)
 800071e:	f002 fd4d 	bl	80031bc <HAL_GPIO_WritePin>
 8000722:	e00b      	b.n	800073c <main+0x1c4>
	  }
	  else if(raw[0] < slider_end)
 8000724:	4b37      	ldr	r3, [pc, #220]	; (8000804 <main+0x28c>)
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	461a      	mov	r2, r3
 800072a:	4b43      	ldr	r3, [pc, #268]	; (8000838 <main+0x2c0>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	429a      	cmp	r2, r3
 8000730:	da04      	bge.n	800073c <main+0x1c4>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2108      	movs	r1, #8
 8000736:	4835      	ldr	r0, [pc, #212]	; (800080c <main+0x294>)
 8000738:	f002 fd40 	bl	80031bc <HAL_GPIO_WritePin>
	  }

	  clk_toggle2 = 1;
 800073c:	4b37      	ldr	r3, [pc, #220]	; (800081c <main+0x2a4>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]
	  if((raw[1] > (wing2_end - 30))&&(raw[1] < (wing2_end + 30))) clk_toggle2 = 0;
 8000742:	4b3e      	ldr	r3, [pc, #248]	; (800083c <main+0x2c4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	3b1d      	subs	r3, #29
 8000748:	4a2e      	ldr	r2, [pc, #184]	; (8000804 <main+0x28c>)
 800074a:	8852      	ldrh	r2, [r2, #2]
 800074c:	4293      	cmp	r3, r2
 800074e:	dc0a      	bgt.n	8000766 <main+0x1ee>
 8000750:	4b3a      	ldr	r3, [pc, #232]	; (800083c <main+0x2c4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	331d      	adds	r3, #29
 8000756:	4a2b      	ldr	r2, [pc, #172]	; (8000804 <main+0x28c>)
 8000758:	8852      	ldrh	r2, [r2, #2]
 800075a:	4293      	cmp	r3, r2
 800075c:	db03      	blt.n	8000766 <main+0x1ee>
 800075e:	4b2f      	ldr	r3, [pc, #188]	; (800081c <main+0x2a4>)
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	e018      	b.n	8000798 <main+0x220>
	  else if(raw[1] > wing2_end)
 8000766:	4b27      	ldr	r3, [pc, #156]	; (8000804 <main+0x28c>)
 8000768:	885b      	ldrh	r3, [r3, #2]
 800076a:	461a      	mov	r2, r3
 800076c:	4b33      	ldr	r3, [pc, #204]	; (800083c <main+0x2c4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	429a      	cmp	r2, r3
 8000772:	dd05      	ble.n	8000780 <main+0x208>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2120      	movs	r1, #32
 8000778:	4824      	ldr	r0, [pc, #144]	; (800080c <main+0x294>)
 800077a:	f002 fd1f 	bl	80031bc <HAL_GPIO_WritePin>
 800077e:	e00b      	b.n	8000798 <main+0x220>
	  }
	  else if(raw[1] < wing2_end)
 8000780:	4b20      	ldr	r3, [pc, #128]	; (8000804 <main+0x28c>)
 8000782:	885b      	ldrh	r3, [r3, #2]
 8000784:	461a      	mov	r2, r3
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <main+0x2c4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	429a      	cmp	r2, r3
 800078c:	da04      	bge.n	8000798 <main+0x220>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2120      	movs	r1, #32
 8000792:	481e      	ldr	r0, [pc, #120]	; (800080c <main+0x294>)
 8000794:	f002 fd12 	bl	80031bc <HAL_GPIO_WritePin>
	  }

	  clk_toggle3 = 1;
 8000798:	4b22      	ldr	r3, [pc, #136]	; (8000824 <main+0x2ac>)
 800079a:	2201      	movs	r2, #1
 800079c:	601a      	str	r2, [r3, #0]
	  if((raw[2] > (wing1_end - 30))&&(raw[2] < (wing1_end + 30))) clk_toggle3 = 0;
 800079e:	4b28      	ldr	r3, [pc, #160]	; (8000840 <main+0x2c8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	3b1d      	subs	r3, #29
 80007a4:	4a17      	ldr	r2, [pc, #92]	; (8000804 <main+0x28c>)
 80007a6:	8892      	ldrh	r2, [r2, #4]
 80007a8:	4293      	cmp	r3, r2
 80007aa:	dc0a      	bgt.n	80007c2 <main+0x24a>
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <main+0x2c8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	331d      	adds	r3, #29
 80007b2:	4a14      	ldr	r2, [pc, #80]	; (8000804 <main+0x28c>)
 80007b4:	8892      	ldrh	r2, [r2, #4]
 80007b6:	4293      	cmp	r3, r2
 80007b8:	db03      	blt.n	80007c2 <main+0x24a>
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <main+0x2ac>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	e01b      	b.n	80007fa <main+0x282>
	  else if(raw[2] < wing1_end)
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <main+0x28c>)
 80007c4:	889b      	ldrh	r3, [r3, #4]
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <main+0x2c8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	da06      	bge.n	80007de <main+0x266>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d6:	480d      	ldr	r0, [pc, #52]	; (800080c <main+0x294>)
 80007d8:	f002 fcf0 	bl	80031bc <HAL_GPIO_WritePin>
 80007dc:	e764      	b.n	80006a8 <main+0x130>
	  }
	  else if(raw[2] > wing1_end)
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <main+0x28c>)
 80007e0:	889b      	ldrh	r3, [r3, #4]
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <main+0x2c8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	f77f af5d 	ble.w	80006a8 <main+0x130>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <main+0x294>)
 80007f6:	f002 fce1 	bl	80031bc <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80007fa:	e755      	b.n	80006a8 <main+0x130>
 80007fc:	2000024c 	.word	0x2000024c
 8000800:	200002a0 	.word	0x200002a0
 8000804:	20000298 	.word	0x20000298
 8000808:	20000198 	.word	0x20000198
 800080c:	48000400 	.word	0x48000400
 8000810:	20000000 	.word	0x20000000
 8000814:	20000248 	.word	0x20000248
 8000818:	20000004 	.word	0x20000004
 800081c:	200000b0 	.word	0x200000b0
 8000820:	20000008 	.word	0x20000008
 8000824:	200001fc 	.word	0x200001fc
 8000828:	08006c90 	.word	0x08006c90
 800082c:	20000100 	.word	0x20000100
 8000830:	200002ec 	.word	0x200002ec
 8000834:	48000800 	.word	0x48000800
 8000838:	2000000c 	.word	0x2000000c
 800083c:	20000010 	.word	0x20000010
 8000840:	20000014 	.word	0x20000014

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b0b8      	sub	sp, #224	; 0xe0
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800084e:	2244      	movs	r2, #68	; 0x44
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f005 fdda 	bl	800640c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000868:	463b      	mov	r3, r7
 800086a:	2288      	movs	r2, #136	; 0x88
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f005 fdcc 	bl	800640c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000874:	2302      	movs	r3, #2
 8000876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800087e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000882:	2310      	movs	r3, #16
 8000884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000888:	2302      	movs	r3, #2
 800088a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800088e:	2302      	movs	r3, #2
 8000890:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800089a:	230a      	movs	r3, #10
 800089c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008a0:	2307      	movs	r3, #7
 80008a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 fd16 	bl	80032e8 <HAL_RCC_OscConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008c2:	f000 faef 	bl	8000ea4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	230f      	movs	r3, #15
 80008c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008cc:	2303      	movs	r3, #3
 80008ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008e8:	2104      	movs	r1, #4
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 f8e2 	bl	8003ab4 <HAL_RCC_ClockConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008f6:	f000 fad5 	bl	8000ea4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008fe:	2300      	movs	r3, #0
 8000900:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	4618      	mov	r0, r3
 8000906:	f003 fadb 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000910:	f000 fac8 	bl	8000ea4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000914:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000918:	f002 fc90 	bl	800323c <HAL_PWREx_ControlVoltageScaling>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000922:	f000 fabf 	bl	8000ea4 <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	37e0      	adds	r7, #224	; 0xe0
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
 8000950:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <MX_ADC1_Init+0x11c>)
 8000954:	4a3e      	ldr	r2, [pc, #248]	; (8000a50 <MX_ADC1_Init+0x120>)
 8000956:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000958:	4b3c      	ldr	r3, [pc, #240]	; (8000a4c <MX_ADC1_Init+0x11c>)
 800095a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800095e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000960:	4b3a      	ldr	r3, [pc, #232]	; (8000a4c <MX_ADC1_Init+0x11c>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000966:	4b39      	ldr	r3, [pc, #228]	; (8000a4c <MX_ADC1_Init+0x11c>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800096c:	4b37      	ldr	r3, [pc, #220]	; (8000a4c <MX_ADC1_Init+0x11c>)
 800096e:	2201      	movs	r2, #1
 8000970:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000972:	4b36      	ldr	r3, [pc, #216]	; (8000a4c <MX_ADC1_Init+0x11c>)
 8000974:	2204      	movs	r2, #4
 8000976:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000978:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <MX_ADC1_Init+0x11c>)
 800097a:	2200      	movs	r2, #0
 800097c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <MX_ADC1_Init+0x11c>)
 8000980:	2201      	movs	r2, #1
 8000982:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000984:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <MX_ADC1_Init+0x11c>)
 8000986:	2203      	movs	r2, #3
 8000988:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800098a:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <MX_ADC1_Init+0x11c>)
 800098c:	2200      	movs	r2, #0
 800098e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000992:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <MX_ADC1_Init+0x11c>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000998:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <MX_ADC1_Init+0x11c>)
 800099a:	2200      	movs	r2, #0
 800099c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800099e:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <MX_ADC1_Init+0x11c>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <MX_ADC1_Init+0x11c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <MX_ADC1_Init+0x11c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b4:	4825      	ldr	r0, [pc, #148]	; (8000a4c <MX_ADC1_Init+0x11c>)
 80009b6:	f000 ff51 	bl	800185c <HAL_ADC_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80009c0:	f000 fa70 	bl	8000ea4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	481f      	ldr	r0, [pc, #124]	; (8000a4c <MX_ADC1_Init+0x11c>)
 80009d0:	f001 fe78 	bl	80026c4 <HAL_ADCEx_MultiModeConfigChannel>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80009da:	f000 fa63 	bl	8000ea4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_ADC1_Init+0x124>)
 80009e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e2:	2306      	movs	r3, #6
 80009e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80009e6:	2307      	movs	r3, #7
 80009e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ea:	237f      	movs	r3, #127	; 0x7f
 80009ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ee:	2304      	movs	r3, #4
 80009f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4814      	ldr	r0, [pc, #80]	; (8000a4c <MX_ADC1_Init+0x11c>)
 80009fc:	f001 f956 	bl	8001cac <HAL_ADC_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000a06:	f000 fa4d 	bl	8000ea4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_ADC1_Init+0x128>)
 8000a0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a0e:	230c      	movs	r3, #12
 8000a10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_ADC1_Init+0x11c>)
 8000a18:	f001 f948 	bl	8001cac <HAL_ADC_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000a22:	f000 fa3f 	bl	8000ea4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <MX_ADC1_Init+0x12c>)
 8000a28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a2a:	2312      	movs	r3, #18
 8000a2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4619      	mov	r1, r3
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <MX_ADC1_Init+0x11c>)
 8000a34:	f001 f93a 	bl	8001cac <HAL_ADC_ConfigChannel>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000a3e:	f000 fa31 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000198 	.word	0x20000198
 8000a50:	50040000 	.word	0x50040000
 8000a54:	14f00020 	.word	0x14f00020
 8000a58:	10c00010 	.word	0x10c00010
 8000a5c:	19200040 	.word	0x19200040

08000a60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a7e:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <MX_TIM1_Init+0xa0>)
 8000a80:	4a20      	ldr	r2, [pc, #128]	; (8000b04 <MX_TIM1_Init+0xa4>)
 8000a82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <MX_TIM1_Init+0xa0>)
 8000a86:	224f      	movs	r2, #79	; 0x4f
 8000a88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <MX_TIM1_Init+0xa0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = DELAY_SLIDER-1;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <MX_TIM1_Init+0xa0>)
 8000a92:	f240 3283 	movw	r2, #899	; 0x383
 8000a96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <MX_TIM1_Init+0xa0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_TIM1_Init+0xa0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <MX_TIM1_Init+0xa0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aaa:	4815      	ldr	r0, [pc, #84]	; (8000b00 <MX_TIM1_Init+0xa0>)
 8000aac:	f003 fec4 	bl	8004838 <HAL_TIM_Base_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ab6:	f000 f9f5 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480e      	ldr	r0, [pc, #56]	; (8000b00 <MX_TIM1_Init+0xa0>)
 8000ac8:	f004 fa04 	bl	8004ed4 <HAL_TIM_ConfigClockSource>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ad2:	f000 f9e7 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <MX_TIM1_Init+0xa0>)
 8000ae8:	f004 feec 	bl	80058c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000af2:	f000 f9d7 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000024c 	.word	0x2000024c
 8000b04:	40012c00 	.word	0x40012c00

08000b08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b26:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <MX_TIM2_Init+0x98>)
 8000b28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MX_TIM2_Init+0x98>)
 8000b30:	224f      	movs	r2, #79	; 0x4f
 8000b32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_TIM2_Init+0x98>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = DELAY_ANGLE-1;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_TIM2_Init+0x98>)
 8000b3c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000b40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_TIM2_Init+0x98>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_TIM2_Init+0x98>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b4e:	4814      	ldr	r0, [pc, #80]	; (8000ba0 <MX_TIM2_Init+0x98>)
 8000b50:	f003 fe72 	bl	8004838 <HAL_TIM_Base_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b5a:	f000 f9a3 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <MX_TIM2_Init+0x98>)
 8000b6c:	f004 f9b2 	bl	8004ed4 <HAL_TIM_ConfigClockSource>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b76:	f000 f995 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	4619      	mov	r1, r3
 8000b86:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <MX_TIM2_Init+0x98>)
 8000b88:	f004 fe9c 	bl	80058c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b92:	f000 f987 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200002a0 	.word	0x200002a0

08000ba4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
 8000bc4:	615a      	str	r2, [r3, #20]
 8000bc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bc8:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <MX_TIM4_Init+0xac>)
 8000bca:	4a22      	ldr	r2, [pc, #136]	; (8000c54 <MX_TIM4_Init+0xb0>)
 8000bcc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bce:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <MX_TIM4_Init+0xac>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <MX_TIM4_Init+0xac>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bda:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <MX_TIM4_Init+0xac>)
 8000bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <MX_TIM4_Init+0xac>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_TIM4_Init+0xac>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bee:	4818      	ldr	r0, [pc, #96]	; (8000c50 <MX_TIM4_Init+0xac>)
 8000bf0:	f003 feea 	bl	80049c8 <HAL_TIM_PWM_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000bfa:	f000 f953 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4810      	ldr	r0, [pc, #64]	; (8000c50 <MX_TIM4_Init+0xac>)
 8000c0e:	f004 fe59 	bl	80058c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000c18:	f000 f944 	bl	8000ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c1c:	2360      	movs	r3, #96	; 0x60
 8000c1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	4619      	mov	r1, r3
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <MX_TIM4_Init+0xac>)
 8000c34:	f004 f83e 	bl	8004cb4 <HAL_TIM_PWM_ConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000c3e:	f000 f931 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <MX_TIM4_Init+0xac>)
 8000c44:	f000 fa40 	bl	80010c8 <HAL_TIM_MspPostInit>

}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	; 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200000b4 	.word	0x200000b4
 8000c54:	40000800 	.word	0x40000800

08000c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c5e:	4a15      	ldr	r2, [pc, #84]	; (8000cb4 <MX_USART2_UART_Init+0x5c>)
 8000c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c7e:	220c      	movs	r2, #12
 8000c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_USART2_UART_Init+0x58>)
 8000c9c:	f004 feb8 	bl	8005a10 <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ca6:	f000 f8fd 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200002ec 	.word	0x200002ec
 8000cb4:	40004400 	.word	0x40004400

08000cb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_DMA_Init+0x38>)
 8000cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <MX_DMA_Init+0x38>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6493      	str	r3, [r2, #72]	; 0x48
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_DMA_Init+0x38>)
 8000ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	200b      	movs	r0, #11
 8000cdc:	f001 fe7d 	bl	80029da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ce0:	200b      	movs	r0, #11
 8000ce2:	f001 fe96 	bl	8002a12 <HAL_NVIC_EnableIRQ>

}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	4a35      	ldr	r2, [pc, #212]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d16:	4b33      	ldr	r3, [pc, #204]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d22:	4b30      	ldr	r3, [pc, #192]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	4a2f      	ldr	r2, [pc, #188]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4a29      	ldr	r2, [pc, #164]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a23      	ldr	r2, [pc, #140]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_GPIO_Init+0xf0>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f240 413c 	movw	r1, #1084	; 0x43c
 8000d70:	481d      	ldr	r0, [pc, #116]	; (8000de8 <MX_GPIO_Init+0xf4>)
 8000d72:	f002 fa23 	bl	80031bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f002 fa1c 	bl	80031bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_GPIO_Init+0xf8>)
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4815      	ldr	r0, [pc, #84]	; (8000df0 <MX_GPIO_Init+0xfc>)
 8000d9a:	f002 f84d 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4
 8000d9e:	f240 433c 	movw	r3, #1084	; 0x43c
 8000da2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	480c      	ldr	r0, [pc, #48]	; (8000de8 <MX_GPIO_Init+0xf4>)
 8000db8:	f002 f83e 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000dbc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f002 f82e 	bl	8002e38 <HAL_GPIO_Init>

}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	; 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48000400 	.word	0x48000400
 8000dec:	10210000 	.word	0x10210000
 8000df0:	48000800 	.word	0x48000800

08000df4 <HAL_TIM_PeriodElapsedCallback>:
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a23      	ldr	r2, [pc, #140]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d114      	bne.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0x3a>
  {
	  if(clk_toggle1 == 1)
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d105      	bne.n	8000e18 <HAL_TIM_PeriodElapsedCallback+0x24>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000e0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f002 f9ea 	bl	80031ec <HAL_GPIO_TogglePin>
	  if(clk_toggle1 == 0)
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d106      	bne.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0x3a>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2a:	f002 f9c7 	bl	80031bc <HAL_GPIO_WritePin>
  }
  if (htim == &htim2)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a18      	ldr	r2, [pc, #96]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d125      	bne.n	8000e82 <HAL_TIM_PeriodElapsedCallback+0x8e>
  {
	  if(clk_toggle2 == 1)
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d103      	bne.n	8000e46 <HAL_TIM_PeriodElapsedCallback+0x52>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000e3e:	2110      	movs	r1, #16
 8000e40:	4816      	ldr	r0, [pc, #88]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000e42:	f002 f9d3 	bl	80031ec <HAL_GPIO_TogglePin>
	  if(clk_toggle2 == 0)
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d104      	bne.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x64>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2110      	movs	r1, #16
 8000e52:	4812      	ldr	r0, [pc, #72]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000e54:	f002 f9b2 	bl	80031bc <HAL_GPIO_WritePin>
	  if(clk_toggle3 == 1)
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d105      	bne.n	8000e6c <HAL_TIM_PeriodElapsedCallback+0x78>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f002 f9c0 	bl	80031ec <HAL_GPIO_TogglePin>
	  if(clk_toggle3 == 0)
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d106      	bne.n	8000e82 <HAL_TIM_PeriodElapsedCallback+0x8e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7e:	f002 f99d 	bl	80031bc <HAL_GPIO_WritePin>
  }
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000024c 	.word	0x2000024c
 8000e90:	20000248 	.word	0x20000248
 8000e94:	200002a0 	.word	0x200002a0
 8000e98:	200000b0 	.word	0x200000b0
 8000e9c:	48000400 	.word	0x48000400
 8000ea0:	200001fc 	.word	0x200001fc

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eac:	e7fe      	b.n	8000eac <Error_Handler+0x8>
	...

08000eb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_MspInit+0x44>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eba:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <HAL_MspInit+0x44>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_MspInit+0x44>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_MspInit+0x44>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <HAL_MspInit+0x44>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_MspInit+0x44>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a37      	ldr	r2, [pc, #220]	; (8000ff4 <HAL_ADC_MspInit+0xfc>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d167      	bne.n	8000fea <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f1a:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <HAL_ADC_MspInit+0x100>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a36      	ldr	r2, [pc, #216]	; (8000ff8 <HAL_ADC_MspInit+0x100>)
 8000f20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b34      	ldr	r3, [pc, #208]	; (8000ff8 <HAL_ADC_MspInit+0x100>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <HAL_ADC_MspInit+0x100>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4a30      	ldr	r2, [pc, #192]	; (8000ff8 <HAL_ADC_MspInit+0x100>)
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <HAL_ADC_MspInit+0x100>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <HAL_ADC_MspInit+0x100>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a2a      	ldr	r2, [pc, #168]	; (8000ff8 <HAL_ADC_MspInit+0x100>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <HAL_ADC_MspInit+0x100>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f62:	2308      	movs	r3, #8
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f66:	230b      	movs	r3, #11
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4821      	ldr	r0, [pc, #132]	; (8000ffc <HAL_ADC_MspInit+0x104>)
 8000f76:	f001 ff5f 	bl	8002e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f7e:	230b      	movs	r3, #11
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f90:	f001 ff52 	bl	8002e38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <HAL_ADC_MspInit+0x108>)
 8000f96:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <HAL_ADC_MspInit+0x10c>)
 8000f98:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_ADC_MspInit+0x108>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_ADC_MspInit+0x108>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_ADC_MspInit+0x108>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_ADC_MspInit+0x108>)
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <HAL_ADC_MspInit+0x108>)
 8000fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_ADC_MspInit+0x108>)
 8000fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <HAL_ADC_MspInit+0x108>)
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <HAL_ADC_MspInit+0x108>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fce:	480c      	ldr	r0, [pc, #48]	; (8001000 <HAL_ADC_MspInit+0x108>)
 8000fd0:	f001 fd3a 	bl	8002a48 <HAL_DMA_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8000fda:	f7ff ff63 	bl	8000ea4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <HAL_ADC_MspInit+0x108>)
 8000fe2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <HAL_ADC_MspInit+0x108>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	50040000 	.word	0x50040000
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	48000800 	.word	0x48000800
 8001000:	20000200 	.word	0x20000200
 8001004:	40020008 	.word	0x40020008

08001008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1a      	ldr	r2, [pc, #104]	; (8001080 <HAL_TIM_Base_MspInit+0x78>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d114      	bne.n	8001044 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <HAL_TIM_Base_MspInit+0x7c>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101e:	4a19      	ldr	r2, [pc, #100]	; (8001084 <HAL_TIM_Base_MspInit+0x7c>)
 8001020:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001024:	6613      	str	r3, [r2, #96]	; 0x60
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_TIM_Base_MspInit+0x7c>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2019      	movs	r0, #25
 8001038:	f001 fccf 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800103c:	2019      	movs	r0, #25
 800103e:	f001 fce8 	bl	8002a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001042:	e018      	b.n	8001076 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800104c:	d113      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <HAL_TIM_Base_MspInit+0x7c>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	4a0c      	ldr	r2, [pc, #48]	; (8001084 <HAL_TIM_Base_MspInit+0x7c>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6593      	str	r3, [r2, #88]	; 0x58
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_TIM_Base_MspInit+0x7c>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	201c      	movs	r0, #28
 800106c:	f001 fcb5 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001070:	201c      	movs	r0, #28
 8001072:	f001 fcce 	bl	8002a12 <HAL_NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40012c00 	.word	0x40012c00
 8001084:	40021000 	.word	0x40021000

08001088 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <HAL_TIM_PWM_MspInit+0x38>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d10b      	bne.n	80010b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_TIM_PWM_MspInit+0x3c>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6593      	str	r3, [r2, #88]	; 0x58
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40000800 	.word	0x40000800
 80010c4:	40021000 	.word	0x40021000

080010c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a11      	ldr	r2, [pc, #68]	; (800112c <HAL_TIM_MspPostInit+0x64>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d11b      	bne.n	8001122 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_TIM_MspPostInit+0x68>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_TIM_MspPostInit+0x68>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_TIM_MspPostInit+0x68>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001102:	2340      	movs	r3, #64	; 0x40
 8001104:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001112:	2302      	movs	r3, #2
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_TIM_MspPostInit+0x6c>)
 800111e:	f001 fe8b 	bl	8002e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3720      	adds	r7, #32
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40000800 	.word	0x40000800
 8001130:	40021000 	.word	0x40021000
 8001134:	48000400 	.word	0x48000400

08001138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <HAL_UART_MspInit+0x7c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d128      	bne.n	80011ac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <HAL_UART_MspInit+0x80>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	4a16      	ldr	r2, [pc, #88]	; (80011b8 <HAL_UART_MspInit+0x80>)
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	6593      	str	r3, [r2, #88]	; 0x58
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <HAL_UART_MspInit+0x80>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_UART_MspInit+0x80>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <HAL_UART_MspInit+0x80>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_UART_MspInit+0x80>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800118a:	230c      	movs	r3, #12
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800119a:	2307      	movs	r3, #7
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a8:	f001 fe46 	bl	8002e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	; 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40004400 	.word	0x40004400
 80011b8:	40021000 	.word	0x40021000

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <NMI_Handler+0x4>

080011c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <HardFault_Handler+0x4>

080011c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <MemManage_Handler+0x4>

080011ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <BusFault_Handler+0x4>

080011d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <UsageFault_Handler+0x4>

080011da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001208:	f000 f90e 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <DMA1_Channel1_IRQHandler+0x10>)
 8001216:	f001 fd2f 	bl	8002c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000200 	.word	0x20000200

08001224 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800122a:	f003 fc24 	bl	8004a76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000024c 	.word	0x2000024c

08001238 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <TIM2_IRQHandler+0x10>)
 800123e:	f003 fc1a 	bl	8004a76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200002a0 	.word	0x200002a0

0800124c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <_sbrk+0x5c>)
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <_sbrk+0x60>)
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <_sbrk+0x64>)
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <_sbrk+0x68>)
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	429a      	cmp	r2, r3
 800127a:	d207      	bcs.n	800128c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800127c:	f005 f89c 	bl	80063b8 <__errno>
 8001280:	4603      	mov	r3, r0
 8001282:	220c      	movs	r2, #12
 8001284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	e009      	b.n	80012a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <_sbrk+0x64>)
 800129c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20018000 	.word	0x20018000
 80012ac:	00000400 	.word	0x00000400
 80012b0:	200000a4 	.word	0x200000a4
 80012b4:	20000388 	.word	0x20000388

080012b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <SystemInit+0x5c>)
 80012be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c2:	4a14      	ldr	r2, [pc, #80]	; (8001314 <SystemInit+0x5c>)
 80012c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <SystemInit+0x60>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a11      	ldr	r2, [pc, #68]	; (8001318 <SystemInit+0x60>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <SystemInit+0x60>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <SystemInit+0x60>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <SystemInit+0x60>)
 80012e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <SystemInit+0x60>)
 80012f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <SystemInit+0x60>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <SystemInit+0x60>)
 80012fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001300:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SystemInit+0x60>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00
 8001318:	40021000 	.word	0x40021000

0800131c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800131c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001354 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001320:	f7ff ffca 	bl	80012b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001324:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001326:	e003      	b.n	8001330 <LoopCopyDataInit>

08001328 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800132a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800132c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800132e:	3104      	adds	r1, #4

08001330 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001330:	480a      	ldr	r0, [pc, #40]	; (800135c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001334:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001336:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001338:	d3f6      	bcc.n	8001328 <CopyDataInit>
	ldr	r2, =_sbss
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <LoopForever+0x12>)
	b	LoopFillZerobss
 800133c:	e002      	b.n	8001344 <LoopFillZerobss>

0800133e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800133e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001340:	f842 3b04 	str.w	r3, [r2], #4

08001344 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <LoopForever+0x16>)
	cmp	r2, r3
 8001346:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001348:	d3f9      	bcc.n	800133e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134a:	f005 f83b 	bl	80063c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800134e:	f7ff f913 	bl	8000578 <main>

08001352 <LoopForever>:

LoopForever:
    b LoopForever
 8001352:	e7fe      	b.n	8001352 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001354:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001358:	08006d68 	.word	0x08006d68
	ldr	r0, =_sdata
 800135c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001360:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8001364:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8001368:	20000384 	.word	0x20000384

0800136c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC1_2_IRQHandler>
	...

08001370 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_Init+0x3c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <HAL_Init+0x3c>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001386:	2003      	movs	r0, #3
 8001388:	f001 fb1c 	bl	80029c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138c:	2000      	movs	r0, #0
 800138e:	f000 f80f 	bl	80013b0 <HAL_InitTick>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	e001      	b.n	80013a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800139e:	f7ff fd87 	bl	8000eb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40022000 	.word	0x40022000

080013b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_InitTick+0x6c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d023      	beq.n	800140c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <HAL_InitTick+0x70>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_InitTick+0x6c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 fb27 	bl	8002a2e <HAL_SYSTICK_Config>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10f      	bne.n	8001406 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b0f      	cmp	r3, #15
 80013ea:	d809      	bhi.n	8001400 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ec:	2200      	movs	r2, #0
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f001 faf1 	bl	80029da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013f8:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <HAL_InitTick+0x74>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e007      	b.n	8001410 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e004      	b.n	8001410 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	e001      	b.n	8001410 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001410:	7bfb      	ldrb	r3, [r7, #15]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000020 	.word	0x20000020
 8001420:	20000018 	.word	0x20000018
 8001424:	2000001c 	.word	0x2000001c

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000020 	.word	0x20000020
 800144c:	20000370 	.word	0x20000370

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000370 	.word	0x20000370

08001468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff ffee 	bl	8001450 <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d005      	beq.n	800148e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_Delay+0x44>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800148e:	bf00      	nop
 8001490:	f7ff ffde 	bl	8001450 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8f7      	bhi.n	8001490 <HAL_Delay+0x28>
  {
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000020 	.word	0x20000020

080014b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	609a      	str	r2, [r3, #8]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	609a      	str	r2, [r3, #8]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3360      	adds	r3, #96	; 0x60
 800152a:	461a      	mov	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <LL_ADC_SetOffset+0x44>)
 800153a:	4013      	ands	r3, r2
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	4313      	orrs	r3, r2
 8001548:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001550:	bf00      	nop
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	03fff000 	.word	0x03fff000

08001560 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3360      	adds	r3, #96	; 0x60
 800156e:	461a      	mov	r2, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3360      	adds	r3, #96	; 0x60
 800159c:	461a      	mov	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	431a      	orrs	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015b6:	bf00      	nop
 80015b8:	371c      	adds	r7, #28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3330      	adds	r3, #48	; 0x30
 80015f8:	461a      	mov	r2, r3
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	4413      	add	r3, r2
 8001606:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	211f      	movs	r1, #31
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	401a      	ands	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	0e9b      	lsrs	r3, r3, #26
 8001620:	f003 011f 	and.w	r1, r3, #31
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	f003 031f 	and.w	r3, r3, #31
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	431a      	orrs	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001634:	bf00      	nop
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001640:	b480      	push	{r7}
 8001642:	b087      	sub	sp, #28
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	3314      	adds	r3, #20
 8001650:	461a      	mov	r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	0e5b      	lsrs	r3, r3, #25
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	4413      	add	r3, r2
 800165e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	0d1b      	lsrs	r3, r3, #20
 8001668:	f003 031f 	and.w	r3, r3, #31
 800166c:	2107      	movs	r1, #7
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	401a      	ands	r2, r3
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	0d1b      	lsrs	r3, r3, #20
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	431a      	orrs	r2, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800168a:	bf00      	nop
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b0:	43db      	mvns	r3, r3
 80016b2:	401a      	ands	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0318 	and.w	r3, r3, #24
 80016ba:	4908      	ldr	r1, [pc, #32]	; (80016dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80016bc:	40d9      	lsrs	r1, r3
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	400b      	ands	r3, r1
 80016c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016c6:	431a      	orrs	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	0007ffff 	.word	0x0007ffff

080016e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 031f 	and.w	r3, r3, #31
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800170c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6093      	str	r3, [r2, #8]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001734:	d101      	bne.n	800173a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001758:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800175c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001784:	d101      	bne.n	800178a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <LL_ADC_IsEnabled+0x18>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <LL_ADC_IsEnabled+0x1a>
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017fa:	f043 0204 	orr.w	r2, r3, #4
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	2b04      	cmp	r3, #4
 8001820:	d101      	bne.n	8001826 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b08      	cmp	r3, #8
 8001846:	d101      	bne.n	800184c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e136      	b.n	8001ae4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001880:	2b00      	cmp	r3, #0
 8001882:	d109      	bne.n	8001898 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff fb37 	bl	8000ef8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff3f 	bl	8001720 <LL_ADC_IsDeepPowerDownEnabled>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d004      	beq.n	80018b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff25 	bl	80016fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff5a 	bl	8001770 <LL_ADC_IsInternalRegulatorEnabled>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d115      	bne.n	80018ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff3e 	bl	8001748 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018cc:	4b87      	ldr	r3, [pc, #540]	; (8001aec <HAL_ADC_Init+0x290>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	099b      	lsrs	r3, r3, #6
 80018d2:	4a87      	ldr	r2, [pc, #540]	; (8001af0 <HAL_ADC_Init+0x294>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	099b      	lsrs	r3, r3, #6
 80018da:	3301      	adds	r3, #1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018e0:	e002      	b.n	80018e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f9      	bne.n	80018e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ff3c 	bl	8001770 <LL_ADC_IsInternalRegulatorEnabled>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10d      	bne.n	800191a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001902:	f043 0210 	orr.w	r2, r3, #16
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	f043 0201 	orr.w	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff75 	bl	800180e <LL_ADC_REG_IsConversionOngoing>
 8001924:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 80cf 	bne.w	8001ad2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 80cb 	bne.w	8001ad2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001940:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001944:	f043 0202 	orr.w	r2, r3, #2
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff35 	bl	80017c0 <LL_ADC_IsEnabled>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d115      	bne.n	8001988 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800195c:	4865      	ldr	r0, [pc, #404]	; (8001af4 <HAL_ADC_Init+0x298>)
 800195e:	f7ff ff2f 	bl	80017c0 <LL_ADC_IsEnabled>
 8001962:	4604      	mov	r4, r0
 8001964:	4864      	ldr	r0, [pc, #400]	; (8001af8 <HAL_ADC_Init+0x29c>)
 8001966:	f7ff ff2b 	bl	80017c0 <LL_ADC_IsEnabled>
 800196a:	4603      	mov	r3, r0
 800196c:	431c      	orrs	r4, r3
 800196e:	4863      	ldr	r0, [pc, #396]	; (8001afc <HAL_ADC_Init+0x2a0>)
 8001970:	f7ff ff26 	bl	80017c0 <LL_ADC_IsEnabled>
 8001974:	4603      	mov	r3, r0
 8001976:	4323      	orrs	r3, r4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	4619      	mov	r1, r3
 8001982:	485f      	ldr	r0, [pc, #380]	; (8001b00 <HAL_ADC_Init+0x2a4>)
 8001984:	f7ff fd94 	bl	80014b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7e5b      	ldrb	r3, [r3, #25]
 800198c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001992:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001998:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800199e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d106      	bne.n	80019c4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	3b01      	subs	r3, #1
 80019bc:	045b      	lsls	r3, r3, #17
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d009      	beq.n	80019e0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <HAL_ADC_Init+0x2a8>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	69b9      	ldr	r1, [r7, #24]
 80019f0:	430b      	orrs	r3, r1
 80019f2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff08 	bl	800180e <LL_ADC_REG_IsConversionOngoing>
 80019fe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff15 	bl	8001834 <LL_ADC_INJ_IsConversionOngoing>
 8001a0a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d13d      	bne.n	8001a8e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d13a      	bne.n	8001a8e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a1c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a24:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a34:	f023 0302 	bic.w	r3, r3, #2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	69b9      	ldr	r1, [r7, #24]
 8001a3e:	430b      	orrs	r3, r1
 8001a40:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d118      	bne.n	8001a7e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a56:	f023 0304 	bic.w	r3, r3, #4
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a62:	4311      	orrs	r1, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	611a      	str	r2, [r3, #16]
 8001a7c:	e007      	b.n	8001a8e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	691a      	ldr	r2, [r3, #16]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0201 	bic.w	r2, r2, #1
 8001a8c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d10c      	bne.n	8001ab0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	f023 010f 	bic.w	r1, r3, #15
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	1e5a      	subs	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	631a      	str	r2, [r3, #48]	; 0x30
 8001aae:	e007      	b.n	8001ac0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 020f 	bic.w	r2, r2, #15
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac4:	f023 0303 	bic.w	r3, r3, #3
 8001ac8:	f043 0201 	orr.w	r2, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	655a      	str	r2, [r3, #84]	; 0x54
 8001ad0:	e007      	b.n	8001ae2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	f043 0210 	orr.w	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ae2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3724      	adds	r7, #36	; 0x24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd90      	pop	{r4, r7, pc}
 8001aec:	20000018 	.word	0x20000018
 8001af0:	053e2d63 	.word	0x053e2d63
 8001af4:	50040000 	.word	0x50040000
 8001af8:	50040100 	.word	0x50040100
 8001afc:	50040200 	.word	0x50040200
 8001b00:	50040300 	.word	0x50040300
 8001b04:	fff0c007 	.word	0xfff0c007

08001b08 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b14:	4850      	ldr	r0, [pc, #320]	; (8001c58 <HAL_ADC_Start_DMA+0x150>)
 8001b16:	f7ff fde3 	bl	80016e0 <LL_ADC_GetMultimode>
 8001b1a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fe74 	bl	800180e <LL_ADC_REG_IsConversionOngoing>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f040 808e 	bne.w	8001c4a <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_ADC_Start_DMA+0x34>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e089      	b.n	8001c50 <HAL_ADC_Start_DMA+0x148>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d002      	beq.n	8001b56 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	2b09      	cmp	r3, #9
 8001b54:	d172      	bne.n	8001c3c <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 fc98 	bl	800248c <ADC_Enable>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d165      	bne.n	8001c32 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a37      	ldr	r2, [pc, #220]	; (8001c5c <HAL_ADC_Start_DMA+0x154>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d002      	beq.n	8001b8a <HAL_ADC_Start_DMA+0x82>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	e000      	b.n	8001b8c <HAL_ADC_Start_DMA+0x84>
 8001b8a:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <HAL_ADC_Start_DMA+0x158>)
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d002      	beq.n	8001b9a <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d105      	bne.n	8001ba6 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	f023 0206 	bic.w	r2, r3, #6
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	659a      	str	r2, [r3, #88]	; 0x58
 8001bbe:	e002      	b.n	8001bc6 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	4a26      	ldr	r2, [pc, #152]	; (8001c64 <HAL_ADC_Start_DMA+0x15c>)
 8001bcc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	4a25      	ldr	r2, [pc, #148]	; (8001c68 <HAL_ADC_Start_DMA+0x160>)
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	4a24      	ldr	r2, [pc, #144]	; (8001c6c <HAL_ADC_Start_DMA+0x164>)
 8001bdc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	221c      	movs	r2, #28
 8001be4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0210 	orr.w	r2, r2, #16
 8001bfc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 0201 	orr.w	r2, r2, #1
 8001c0c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3340      	adds	r3, #64	; 0x40
 8001c18:	4619      	mov	r1, r3
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f000 ffcb 	bl	8002bb8 <HAL_DMA_Start_IT>
 8001c22:	4603      	mov	r3, r0
 8001c24:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fddb 	bl	80017e6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001c30:	e00d      	b.n	8001c4e <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001c3a:	e008      	b.n	8001c4e <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001c48:	e001      	b.n	8001c4e <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	50040300 	.word	0x50040300
 8001c5c:	50040100 	.word	0x50040100
 8001c60:	50040000 	.word	0x50040000
 8001c64:	08002551 	.word	0x08002551
 8001c68:	08002629 	.word	0x08002629
 8001c6c:	08002645 	.word	0x08002645

08001c70 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b0b6      	sub	sp, #216	; 0xd8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x22>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e3c7      	b.n	800245e <HAL_ADC_ConfigChannel+0x7b2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fd97 	bl	800180e <LL_ADC_REG_IsConversionOngoing>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 83a8 	bne.w	8002438 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d824      	bhi.n	8001d3a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	3b02      	subs	r3, #2
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d81b      	bhi.n	8001d32 <HAL_ADC_ConfigChannel+0x86>
 8001cfa:	a201      	add	r2, pc, #4	; (adr r2, 8001d00 <HAL_ADC_ConfigChannel+0x54>)
 8001cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d00:	08001d11 	.word	0x08001d11
 8001d04:	08001d19 	.word	0x08001d19
 8001d08:	08001d21 	.word	0x08001d21
 8001d0c:	08001d29 	.word	0x08001d29
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	220c      	movs	r2, #12
 8001d14:	605a      	str	r2, [r3, #4]
          break;
 8001d16:	e011      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	2212      	movs	r2, #18
 8001d1c:	605a      	str	r2, [r3, #4]
          break;
 8001d1e:	e00d      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2218      	movs	r2, #24
 8001d24:	605a      	str	r2, [r3, #4]
          break;
 8001d26:	e009      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d2e:	605a      	str	r2, [r3, #4]
          break;
 8001d30:	e004      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2206      	movs	r2, #6
 8001d36:	605a      	str	r2, [r3, #4]
          break;
 8001d38:	e000      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d3a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f7ff fc4d 	bl	80015e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fd5b 	bl	800180e <LL_ADC_REG_IsConversionOngoing>
 8001d58:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fd67 	bl	8001834 <LL_ADC_INJ_IsConversionOngoing>
 8001d66:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 81a6 	bne.w	80020c0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 81a1 	bne.w	80020c0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	6819      	ldr	r1, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f7ff fc58 	bl	8001640 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	08db      	lsrs	r3, r3, #3
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d00a      	beq.n	8001dc8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6919      	ldr	r1, [r3, #16]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dc2:	f7ff fba9 	bl	8001518 <LL_ADC_SetOffset>
 8001dc6:	e17b      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fbc6 	bl	8001560 <LL_ADC_GetOffsetChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10a      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x148>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fbbb 	bl	8001560 <LL_ADC_GetOffsetChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	0e9b      	lsrs	r3, r3, #26
 8001dee:	f003 021f 	and.w	r2, r3, #31
 8001df2:	e01e      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x186>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fbb0 	bl	8001560 <LL_ADC_GetOffsetChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001e22:	2320      	movs	r3, #32
 8001e24:	e004      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001e26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d105      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x19e>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0e9b      	lsrs	r3, r3, #26
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	e018      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x1d0>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001e6e:	2320      	movs	r3, #32
 8001e70:	e004      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d106      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2200      	movs	r2, #0
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fb7f 	bl	800158c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2101      	movs	r1, #1
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fb63 	bl	8001560 <LL_ADC_GetOffsetChannel>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10a      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x20e>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fb58 	bl	8001560 <LL_ADC_GetOffsetChannel>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	0e9b      	lsrs	r3, r3, #26
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	e01e      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x24c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fb4d 	bl	8001560 <LL_ADC_GetOffsetChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ed8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001edc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ee0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001ee8:	2320      	movs	r3, #32
 8001eea:	e004      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001eec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ef0:	fab3 f383 	clz	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d105      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x264>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	0e9b      	lsrs	r3, r3, #26
 8001f0a:	f003 031f 	and.w	r3, r3, #31
 8001f0e:	e018      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x296>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001f34:	2320      	movs	r3, #32
 8001f36:	e004      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001f38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d106      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fb1c 	bl	800158c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2102      	movs	r1, #2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fb00 	bl	8001560 <LL_ADC_GetOffsetChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10a      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x2d4>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2102      	movs	r1, #2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff faf5 	bl	8001560 <LL_ADC_GetOffsetChannel>
 8001f76:	4603      	mov	r3, r0
 8001f78:	0e9b      	lsrs	r3, r3, #26
 8001f7a:	f003 021f 	and.w	r2, r3, #31
 8001f7e:	e01e      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x312>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2102      	movs	r1, #2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff faea 	bl	8001560 <LL_ADC_GetOffsetChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001fa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001fae:	2320      	movs	r3, #32
 8001fb0:	e004      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001fb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x32a>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	0e9b      	lsrs	r3, r3, #26
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	e016      	b.n	8002004 <HAL_ADC_ConfigChannel+0x358>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001fe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001fee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	e004      	b.n	8002004 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001ffa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002004:	429a      	cmp	r2, r3
 8002006:	d106      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2200      	movs	r2, #0
 800200e:	2102      	movs	r1, #2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fabb 	bl	800158c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2103      	movs	r1, #3
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fa9f 	bl	8001560 <LL_ADC_GetOffsetChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x396>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2103      	movs	r1, #3
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fa94 	bl	8001560 <LL_ADC_GetOffsetChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	0e9b      	lsrs	r3, r3, #26
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	e017      	b.n	8002072 <HAL_ADC_ConfigChannel+0x3c6>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2103      	movs	r1, #3
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fa89 	bl	8001560 <LL_ADC_GetOffsetChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800205a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800205c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800205e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002064:	2320      	movs	r3, #32
 8002066:	e003      	b.n	8002070 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207a:	2b00      	cmp	r3, #0
 800207c:	d105      	bne.n	800208a <HAL_ADC_ConfigChannel+0x3de>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0e9b      	lsrs	r3, r3, #26
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	e011      	b.n	80020ae <HAL_ADC_ConfigChannel+0x402>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800209a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800209c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80020a2:	2320      	movs	r3, #32
 80020a4:	e003      	b.n	80020ae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80020a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d106      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	2103      	movs	r1, #3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fa66 	bl	800158c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fb7b 	bl	80017c0 <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f040 813f 	bne.w	8002350 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6819      	ldr	r1, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	461a      	mov	r2, r3
 80020e0:	f7ff fada 	bl	8001698 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a8e      	ldr	r2, [pc, #568]	; (8002324 <HAL_ADC_ConfigChannel+0x678>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	f040 8130 	bne.w	8002350 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10b      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x46c>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0e9b      	lsrs	r3, r3, #26
 8002106:	3301      	adds	r3, #1
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	2b09      	cmp	r3, #9
 800210e:	bf94      	ite	ls
 8002110:	2301      	movls	r3, #1
 8002112:	2300      	movhi	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	e019      	b.n	800214c <HAL_ADC_ConfigChannel+0x4a0>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002128:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800212a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002130:	2320      	movs	r3, #32
 8002132:	e003      	b.n	800213c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3301      	adds	r3, #1
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	2b09      	cmp	r3, #9
 8002144:	bf94      	ite	ls
 8002146:	2301      	movls	r3, #1
 8002148:	2300      	movhi	r3, #0
 800214a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800214c:	2b00      	cmp	r3, #0
 800214e:	d079      	beq.n	8002244 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002158:	2b00      	cmp	r3, #0
 800215a:	d107      	bne.n	800216c <HAL_ADC_ConfigChannel+0x4c0>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0e9b      	lsrs	r3, r3, #26
 8002162:	3301      	adds	r3, #1
 8002164:	069b      	lsls	r3, r3, #26
 8002166:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800216a:	e015      	b.n	8002198 <HAL_ADC_ConfigChannel+0x4ec>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800217a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800217c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800217e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002184:	2320      	movs	r3, #32
 8002186:	e003      	b.n	8002190 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	3301      	adds	r3, #1
 8002192:	069b      	lsls	r3, r3, #26
 8002194:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d109      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x50c>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	0e9b      	lsrs	r3, r3, #26
 80021aa:	3301      	adds	r3, #1
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	2101      	movs	r1, #1
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	e017      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x53c>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80021c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80021ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80021d0:	2320      	movs	r3, #32
 80021d2:	e003      	b.n	80021dc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80021d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	ea42 0103 	orr.w	r1, r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10a      	bne.n	800220e <HAL_ADC_ConfigChannel+0x562>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	3301      	adds	r3, #1
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	051b      	lsls	r3, r3, #20
 800220c:	e018      	b.n	8002240 <HAL_ADC_ConfigChannel+0x594>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002226:	2320      	movs	r3, #32
 8002228:	e003      	b.n	8002232 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800222a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	3301      	adds	r3, #1
 8002234:	f003 021f 	and.w	r2, r3, #31
 8002238:	4613      	mov	r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002240:	430b      	orrs	r3, r1
 8002242:	e080      	b.n	8002346 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224c:	2b00      	cmp	r3, #0
 800224e:	d107      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x5b4>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	0e9b      	lsrs	r3, r3, #26
 8002256:	3301      	adds	r3, #1
 8002258:	069b      	lsls	r3, r3, #26
 800225a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800225e:	e015      	b.n	800228c <HAL_ADC_ConfigChannel+0x5e0>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002278:	2320      	movs	r3, #32
 800227a:	e003      	b.n	8002284 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	3301      	adds	r3, #1
 8002286:	069b      	lsls	r3, r3, #26
 8002288:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x600>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	3301      	adds	r3, #1
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	2101      	movs	r1, #1
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	e017      	b.n	80022dc <HAL_ADC_ConfigChannel+0x630>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	61fb      	str	r3, [r7, #28]
  return result;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e003      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	ea42 0103 	orr.w	r1, r2, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10d      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x65c>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0e9b      	lsrs	r3, r3, #26
 80022f2:	3301      	adds	r3, #1
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	3b1e      	subs	r3, #30
 8002300:	051b      	lsls	r3, r3, #20
 8002302:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002306:	e01d      	b.n	8002344 <HAL_ADC_ConfigChannel+0x698>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	613b      	str	r3, [r7, #16]
  return result;
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d103      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002320:	2320      	movs	r3, #32
 8002322:	e005      	b.n	8002330 <HAL_ADC_ConfigChannel+0x684>
 8002324:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	3301      	adds	r3, #1
 8002332:	f003 021f 	and.w	r2, r3, #31
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	3b1e      	subs	r3, #30
 800233e:	051b      	lsls	r3, r3, #20
 8002340:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002344:	430b      	orrs	r3, r1
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	6892      	ldr	r2, [r2, #8]
 800234a:	4619      	mov	r1, r3
 800234c:	f7ff f978 	bl	8001640 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b44      	ldr	r3, [pc, #272]	; (8002468 <HAL_ADC_ConfigChannel+0x7bc>)
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d07a      	beq.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800235c:	4843      	ldr	r0, [pc, #268]	; (800246c <HAL_ADC_ConfigChannel+0x7c0>)
 800235e:	f7ff f8cd 	bl	80014fc <LL_ADC_GetCommonPathInternalCh>
 8002362:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a41      	ldr	r2, [pc, #260]	; (8002470 <HAL_ADC_ConfigChannel+0x7c4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d12c      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d126      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a3c      	ldr	r2, [pc, #240]	; (8002474 <HAL_ADC_ConfigChannel+0x7c8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d004      	beq.n	8002390 <HAL_ADC_ConfigChannel+0x6e4>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a3b      	ldr	r2, [pc, #236]	; (8002478 <HAL_ADC_ConfigChannel+0x7cc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d15d      	bne.n	800244c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002390:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002398:	4619      	mov	r1, r3
 800239a:	4834      	ldr	r0, [pc, #208]	; (800246c <HAL_ADC_ConfigChannel+0x7c0>)
 800239c:	f7ff f89b 	bl	80014d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023a0:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_ADC_ConfigChannel+0x7d0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	099b      	lsrs	r3, r3, #6
 80023a6:	4a36      	ldr	r2, [pc, #216]	; (8002480 <HAL_ADC_ConfigChannel+0x7d4>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	099b      	lsrs	r3, r3, #6
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023ba:	e002      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3b01      	subs	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f9      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023c8:	e040      	b.n	800244c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2d      	ldr	r2, [pc, #180]	; (8002484 <HAL_ADC_ConfigChannel+0x7d8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d118      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x75a>
 80023d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d112      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a23      	ldr	r2, [pc, #140]	; (8002474 <HAL_ADC_ConfigChannel+0x7c8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d004      	beq.n	80023f4 <HAL_ADC_ConfigChannel+0x748>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a22      	ldr	r2, [pc, #136]	; (8002478 <HAL_ADC_ConfigChannel+0x7cc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d12d      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fc:	4619      	mov	r1, r3
 80023fe:	481b      	ldr	r0, [pc, #108]	; (800246c <HAL_ADC_ConfigChannel+0x7c0>)
 8002400:	f7ff f869 	bl	80014d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002404:	e024      	b.n	8002450 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1f      	ldr	r2, [pc, #124]	; (8002488 <HAL_ADC_ConfigChannel+0x7dc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d120      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002410:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d11a      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a14      	ldr	r2, [pc, #80]	; (8002474 <HAL_ADC_ConfigChannel+0x7c8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d115      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002426:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800242a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800242e:	4619      	mov	r1, r3
 8002430:	480e      	ldr	r0, [pc, #56]	; (800246c <HAL_ADC_ConfigChannel+0x7c0>)
 8002432:	f7ff f850 	bl	80014d6 <LL_ADC_SetCommonPathInternalCh>
 8002436:	e00c      	b.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	f043 0220 	orr.w	r2, r3, #32
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800244a:	e002      	b.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800244c:	bf00      	nop
 800244e:	e000      	b.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002450:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800245a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800245e:	4618      	mov	r0, r3
 8002460:	37d8      	adds	r7, #216	; 0xd8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	80080000 	.word	0x80080000
 800246c:	50040300 	.word	0x50040300
 8002470:	c7520000 	.word	0xc7520000
 8002474:	50040000 	.word	0x50040000
 8002478:	50040200 	.word	0x50040200
 800247c:	20000018 	.word	0x20000018
 8002480:	053e2d63 	.word	0x053e2d63
 8002484:	cb840000 	.word	0xcb840000
 8002488:	80000001 	.word	0x80000001

0800248c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff f991 	bl	80017c0 <LL_ADC_IsEnabled>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d14d      	bne.n	8002540 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	4b28      	ldr	r3, [pc, #160]	; (800254c <ADC_Enable+0xc0>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00d      	beq.n	80024ce <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b6:	f043 0210 	orr.w	r2, r3, #16
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	f043 0201 	orr.w	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e039      	b.n	8002542 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f960 	bl	8001798 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024d8:	f7fe ffba 	bl	8001450 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024de:	e028      	b.n	8002532 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff f96b 	bl	80017c0 <LL_ADC_IsEnabled>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d104      	bne.n	80024fa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff f94f 	bl	8001798 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024fa:	f7fe ffa9 	bl	8001450 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d914      	bls.n	8002532 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b01      	cmp	r3, #1
 8002514:	d00d      	beq.n	8002532 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251a:	f043 0210 	orr.w	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e007      	b.n	8002542 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	d1cf      	bne.n	80024e0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	8000003f 	.word	0x8000003f

08002550 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002566:	2b00      	cmp	r3, #0
 8002568:	d14b      	bne.n	8002602 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d021      	beq.n	80025c8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff f81a 	bl	80015c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d032      	beq.n	80025fa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d12b      	bne.n	80025fa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d11f      	bne.n	80025fa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
 80025c6:	e018      	b.n	80025fa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d111      	bne.n	80025fa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d105      	bne.n	80025fa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	f043 0201 	orr.w	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff fb38 	bl	8001c70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002600:	e00e      	b.n	8002620 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f7ff fb42 	bl	8001c98 <HAL_ADC_ErrorCallback>
}
 8002614:	e004      	b.n	8002620 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	4798      	blx	r3
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff fb24 	bl	8001c84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002656:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f043 0204 	orr.w	r2, r3, #4
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f7ff fb14 	bl	8001c98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <LL_ADC_IsEnabled>:
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <LL_ADC_IsEnabled+0x18>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <LL_ADC_IsEnabled+0x1a>
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <LL_ADC_REG_IsConversionOngoing>:
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d101      	bne.n	80026b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	b09f      	sub	sp, #124	; 0x7c
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026de:	2302      	movs	r3, #2
 80026e0:	e093      	b.n	800280a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80026ea:	2300      	movs	r3, #0
 80026ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80026ee:	2300      	movs	r3, #0
 80026f0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a47      	ldr	r2, [pc, #284]	; (8002814 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d102      	bne.n	8002702 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026fc:	4b46      	ldr	r3, [pc, #280]	; (8002818 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	e001      	b.n	8002706 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10b      	bne.n	8002724 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	f043 0220 	orr.w	r2, r3, #32
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e072      	b.n	800280a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff ffb9 	bl	800269e <LL_ADC_REG_IsConversionOngoing>
 800272c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ffb3 	bl	800269e <LL_ADC_REG_IsConversionOngoing>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d154      	bne.n	80027e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800273e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002740:	2b00      	cmp	r3, #0
 8002742:	d151      	bne.n	80027e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002744:	4b35      	ldr	r3, [pc, #212]	; (800281c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002746:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d02c      	beq.n	80027aa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002762:	035b      	lsls	r3, r3, #13
 8002764:	430b      	orrs	r3, r1
 8002766:	431a      	orrs	r2, r3
 8002768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800276c:	4829      	ldr	r0, [pc, #164]	; (8002814 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800276e:	f7ff ff83 	bl	8002678 <LL_ADC_IsEnabled>
 8002772:	4604      	mov	r4, r0
 8002774:	4828      	ldr	r0, [pc, #160]	; (8002818 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002776:	f7ff ff7f 	bl	8002678 <LL_ADC_IsEnabled>
 800277a:	4603      	mov	r3, r0
 800277c:	431c      	orrs	r4, r3
 800277e:	4828      	ldr	r0, [pc, #160]	; (8002820 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002780:	f7ff ff7a 	bl	8002678 <LL_ADC_IsEnabled>
 8002784:	4603      	mov	r3, r0
 8002786:	4323      	orrs	r3, r4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d137      	bne.n	80027fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800278c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002794:	f023 030f 	bic.w	r3, r3, #15
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	6811      	ldr	r1, [r2, #0]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	6892      	ldr	r2, [r2, #8]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	431a      	orrs	r2, r3
 80027a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027a8:	e028      	b.n	80027fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027b6:	4817      	ldr	r0, [pc, #92]	; (8002814 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80027b8:	f7ff ff5e 	bl	8002678 <LL_ADC_IsEnabled>
 80027bc:	4604      	mov	r4, r0
 80027be:	4816      	ldr	r0, [pc, #88]	; (8002818 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80027c0:	f7ff ff5a 	bl	8002678 <LL_ADC_IsEnabled>
 80027c4:	4603      	mov	r3, r0
 80027c6:	431c      	orrs	r4, r3
 80027c8:	4815      	ldr	r0, [pc, #84]	; (8002820 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80027ca:	f7ff ff55 	bl	8002678 <LL_ADC_IsEnabled>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4323      	orrs	r3, r4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d112      	bne.n	80027fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80027d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80027de:	f023 030f 	bic.w	r3, r3, #15
 80027e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80027e4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027e6:	e009      	b.n	80027fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80027fa:	e000      	b.n	80027fe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002806:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800280a:	4618      	mov	r0, r3
 800280c:	377c      	adds	r7, #124	; 0x7c
 800280e:	46bd      	mov	sp, r7
 8002810:	bd90      	pop	{r4, r7, pc}
 8002812:	bf00      	nop
 8002814:	50040000 	.word	0x50040000
 8002818:	50040100 	.word	0x50040100
 800281c:	50040300 	.word	0x50040300
 8002820:	50040200 	.word	0x50040200

08002824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <__NVIC_SetPriorityGrouping+0x44>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002840:	4013      	ands	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800284c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002856:	4a04      	ldr	r2, [pc, #16]	; (8002868 <__NVIC_SetPriorityGrouping+0x44>)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	60d3      	str	r3, [r2, #12]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002870:	4b04      	ldr	r3, [pc, #16]	; (8002884 <__NVIC_GetPriorityGrouping+0x18>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	f003 0307 	and.w	r3, r3, #7
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	2b00      	cmp	r3, #0
 8002898:	db0b      	blt.n	80028b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	f003 021f 	and.w	r2, r3, #31
 80028a0:	4907      	ldr	r1, [pc, #28]	; (80028c0 <__NVIC_EnableIRQ+0x38>)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	2001      	movs	r0, #1
 80028aa:	fa00 f202 	lsl.w	r2, r0, r2
 80028ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000e100 	.word	0xe000e100

080028c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	6039      	str	r1, [r7, #0]
 80028ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	db0a      	blt.n	80028ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	490c      	ldr	r1, [pc, #48]	; (8002910 <__NVIC_SetPriority+0x4c>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	0112      	lsls	r2, r2, #4
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	440b      	add	r3, r1
 80028e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028ec:	e00a      	b.n	8002904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4908      	ldr	r1, [pc, #32]	; (8002914 <__NVIC_SetPriority+0x50>)
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	3b04      	subs	r3, #4
 80028fc:	0112      	lsls	r2, r2, #4
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	440b      	add	r3, r1
 8002902:	761a      	strb	r2, [r3, #24]
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000e100 	.word	0xe000e100
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	; 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f1c3 0307 	rsb	r3, r3, #7
 8002932:	2b04      	cmp	r3, #4
 8002934:	bf28      	it	cs
 8002936:	2304      	movcs	r3, #4
 8002938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3304      	adds	r3, #4
 800293e:	2b06      	cmp	r3, #6
 8002940:	d902      	bls.n	8002948 <NVIC_EncodePriority+0x30>
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3b03      	subs	r3, #3
 8002946:	e000      	b.n	800294a <NVIC_EncodePriority+0x32>
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	f04f 32ff 	mov.w	r2, #4294967295
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43da      	mvns	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	401a      	ands	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002960:	f04f 31ff 	mov.w	r1, #4294967295
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	43d9      	mvns	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	4313      	orrs	r3, r2
         );
}
 8002972:	4618      	mov	r0, r3
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002990:	d301      	bcc.n	8002996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002992:	2301      	movs	r3, #1
 8002994:	e00f      	b.n	80029b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <SysTick_Config+0x40>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3b01      	subs	r3, #1
 800299c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800299e:	210f      	movs	r1, #15
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	f7ff ff8e 	bl	80028c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <SysTick_Config+0x40>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ae:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <SysTick_Config+0x40>)
 80029b0:	2207      	movs	r2, #7
 80029b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	e000e010 	.word	0xe000e010

080029c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff29 	bl	8002824 <__NVIC_SetPriorityGrouping>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029ec:	f7ff ff3e 	bl	800286c <__NVIC_GetPriorityGrouping>
 80029f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	6978      	ldr	r0, [r7, #20]
 80029f8:	f7ff ff8e 	bl	8002918 <NVIC_EncodePriority>
 80029fc:	4602      	mov	r2, r0
 80029fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff5d 	bl	80028c4 <__NVIC_SetPriority>
}
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4603      	mov	r3, r0
 8002a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff31 	bl	8002888 <__NVIC_EnableIRQ>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff ffa2 	bl	8002980 <SysTick_Config>
 8002a3c:	4603      	mov	r3, r0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e098      	b.n	8002b8c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4b4d      	ldr	r3, [pc, #308]	; (8002b98 <HAL_DMA_Init+0x150>)
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d80f      	bhi.n	8002a86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b4b      	ldr	r3, [pc, #300]	; (8002b9c <HAL_DMA_Init+0x154>)
 8002a6e:	4413      	add	r3, r2
 8002a70:	4a4b      	ldr	r2, [pc, #300]	; (8002ba0 <HAL_DMA_Init+0x158>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	009a      	lsls	r2, r3, #2
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a48      	ldr	r2, [pc, #288]	; (8002ba4 <HAL_DMA_Init+0x15c>)
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40
 8002a84:	e00e      	b.n	8002aa4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4b46      	ldr	r3, [pc, #280]	; (8002ba8 <HAL_DMA_Init+0x160>)
 8002a8e:	4413      	add	r3, r2
 8002a90:	4a43      	ldr	r2, [pc, #268]	; (8002ba0 <HAL_DMA_Init+0x158>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	009a      	lsls	r2, r3, #2
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a42      	ldr	r2, [pc, #264]	; (8002bac <HAL_DMA_Init+0x164>)
 8002aa2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002afe:	d039      	beq.n	8002b74 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	4a27      	ldr	r2, [pc, #156]	; (8002ba4 <HAL_DMA_Init+0x15c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d11a      	bne.n	8002b40 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b0a:	4b29      	ldr	r3, [pc, #164]	; (8002bb0 <HAL_DMA_Init+0x168>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f003 031c 	and.w	r3, r3, #28
 8002b16:	210f      	movs	r1, #15
 8002b18:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	4924      	ldr	r1, [pc, #144]	; (8002bb0 <HAL_DMA_Init+0x168>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b24:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <HAL_DMA_Init+0x168>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	f003 031c 	and.w	r3, r3, #28
 8002b34:	fa01 f303 	lsl.w	r3, r1, r3
 8002b38:	491d      	ldr	r1, [pc, #116]	; (8002bb0 <HAL_DMA_Init+0x168>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]
 8002b3e:	e019      	b.n	8002b74 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b40:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <HAL_DMA_Init+0x16c>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	f003 031c 	and.w	r3, r3, #28
 8002b4c:	210f      	movs	r1, #15
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	4917      	ldr	r1, [pc, #92]	; (8002bb4 <HAL_DMA_Init+0x16c>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <HAL_DMA_Init+0x16c>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6859      	ldr	r1, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f003 031c 	and.w	r3, r3, #28
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	4911      	ldr	r1, [pc, #68]	; (8002bb4 <HAL_DMA_Init+0x16c>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	40020407 	.word	0x40020407
 8002b9c:	bffdfff8 	.word	0xbffdfff8
 8002ba0:	cccccccd 	.word	0xcccccccd
 8002ba4:	40020000 	.word	0x40020000
 8002ba8:	bffdfbf8 	.word	0xbffdfbf8
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	400200a8 	.word	0x400200a8
 8002bb4:	400204a8 	.word	0x400204a8

08002bb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_DMA_Start_IT+0x20>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e04b      	b.n	8002c70 <HAL_DMA_Start_IT+0xb8>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d13a      	bne.n	8002c62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f8e0 	bl	8002dd6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d008      	beq.n	8002c30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 020e 	orr.w	r2, r2, #14
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e00f      	b.n	8002c50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0204 	bic.w	r2, r2, #4
 8002c3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 020a 	orr.w	r2, r2, #10
 8002c4e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	e005      	b.n	8002c6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	f003 031c 	and.w	r3, r3, #28
 8002c98:	2204      	movs	r2, #4
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d026      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x7a>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d021      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d107      	bne.n	8002ccc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0204 	bic.w	r2, r2, #4
 8002cca:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd0:	f003 021c 	and.w	r2, r3, #28
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	2104      	movs	r1, #4
 8002cda:	fa01 f202 	lsl.w	r2, r1, r2
 8002cde:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d071      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002cf0:	e06c      	b.n	8002dcc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f003 031c 	and.w	r3, r3, #28
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d02e      	beq.n	8002d64 <HAL_DMA_IRQHandler+0xec>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d029      	beq.n	8002d64 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10b      	bne.n	8002d36 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 020a 	bic.w	r2, r2, #10
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f003 021c 	and.w	r2, r3, #28
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2102      	movs	r1, #2
 8002d44:	fa01 f202 	lsl.w	r2, r1, r2
 8002d48:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d038      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d62:	e033      	b.n	8002dcc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	f003 031c 	and.w	r3, r3, #28
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d02a      	beq.n	8002dce <HAL_DMA_IRQHandler+0x156>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d025      	beq.n	8002dce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 020e 	bic.w	r2, r2, #14
 8002d90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f003 021c 	and.w	r2, r3, #28
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	2101      	movs	r1, #1
 8002da0:	fa01 f202 	lsl.w	r2, r1, r2
 8002da4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d004      	beq.n	8002dce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
}
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	f003 021c 	and.w	r2, r3, #28
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	2101      	movs	r1, #1
 8002df2:	fa01 f202 	lsl.w	r2, r1, r2
 8002df6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	d108      	bne.n	8002e1a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e18:	e007      	b.n	8002e2a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	60da      	str	r2, [r3, #12]
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e46:	e17f      	b.n	8003148 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	fa01 f303 	lsl.w	r3, r1, r3
 8002e54:	4013      	ands	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8171 	beq.w	8003142 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d00b      	beq.n	8002e80 <HAL_GPIO_Init+0x48>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d007      	beq.n	8002e80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e74:	2b11      	cmp	r3, #17
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b12      	cmp	r3, #18
 8002e7e:	d130      	bne.n	8002ee2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	f003 0201 	and.w	r2, r3, #1
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d118      	bne.n	8002f20 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	08db      	lsrs	r3, r3, #3
 8002f0a:	f003 0201 	and.w	r2, r3, #1
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d003      	beq.n	8002f60 <HAL_GPIO_Init+0x128>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b12      	cmp	r3, #18
 8002f5e:	d123      	bne.n	8002fa8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	08da      	lsrs	r2, r3, #3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3208      	adds	r2, #8
 8002f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	220f      	movs	r2, #15
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	08da      	lsrs	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3208      	adds	r2, #8
 8002fa2:	6939      	ldr	r1, [r7, #16]
 8002fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0203 	and.w	r2, r3, #3
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80ac 	beq.w	8003142 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fea:	4b5f      	ldr	r3, [pc, #380]	; (8003168 <HAL_GPIO_Init+0x330>)
 8002fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fee:	4a5e      	ldr	r2, [pc, #376]	; (8003168 <HAL_GPIO_Init+0x330>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ff6:	4b5c      	ldr	r3, [pc, #368]	; (8003168 <HAL_GPIO_Init+0x330>)
 8002ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003002:	4a5a      	ldr	r2, [pc, #360]	; (800316c <HAL_GPIO_Init+0x334>)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	089b      	lsrs	r3, r3, #2
 8003008:	3302      	adds	r3, #2
 800300a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	220f      	movs	r2, #15
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800302c:	d025      	beq.n	800307a <HAL_GPIO_Init+0x242>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a4f      	ldr	r2, [pc, #316]	; (8003170 <HAL_GPIO_Init+0x338>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d01f      	beq.n	8003076 <HAL_GPIO_Init+0x23e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a4e      	ldr	r2, [pc, #312]	; (8003174 <HAL_GPIO_Init+0x33c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d019      	beq.n	8003072 <HAL_GPIO_Init+0x23a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a4d      	ldr	r2, [pc, #308]	; (8003178 <HAL_GPIO_Init+0x340>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d013      	beq.n	800306e <HAL_GPIO_Init+0x236>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4c      	ldr	r2, [pc, #304]	; (800317c <HAL_GPIO_Init+0x344>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00d      	beq.n	800306a <HAL_GPIO_Init+0x232>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a4b      	ldr	r2, [pc, #300]	; (8003180 <HAL_GPIO_Init+0x348>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d007      	beq.n	8003066 <HAL_GPIO_Init+0x22e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a4a      	ldr	r2, [pc, #296]	; (8003184 <HAL_GPIO_Init+0x34c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d101      	bne.n	8003062 <HAL_GPIO_Init+0x22a>
 800305e:	2306      	movs	r3, #6
 8003060:	e00c      	b.n	800307c <HAL_GPIO_Init+0x244>
 8003062:	2307      	movs	r3, #7
 8003064:	e00a      	b.n	800307c <HAL_GPIO_Init+0x244>
 8003066:	2305      	movs	r3, #5
 8003068:	e008      	b.n	800307c <HAL_GPIO_Init+0x244>
 800306a:	2304      	movs	r3, #4
 800306c:	e006      	b.n	800307c <HAL_GPIO_Init+0x244>
 800306e:	2303      	movs	r3, #3
 8003070:	e004      	b.n	800307c <HAL_GPIO_Init+0x244>
 8003072:	2302      	movs	r3, #2
 8003074:	e002      	b.n	800307c <HAL_GPIO_Init+0x244>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <HAL_GPIO_Init+0x244>
 800307a:	2300      	movs	r3, #0
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	f002 0203 	and.w	r2, r2, #3
 8003082:	0092      	lsls	r2, r2, #2
 8003084:	4093      	lsls	r3, r2
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800308c:	4937      	ldr	r1, [pc, #220]	; (800316c <HAL_GPIO_Init+0x334>)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	3302      	adds	r3, #2
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800309a:	4b3b      	ldr	r3, [pc, #236]	; (8003188 <HAL_GPIO_Init+0x350>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030be:	4a32      	ldr	r2, [pc, #200]	; (8003188 <HAL_GPIO_Init+0x350>)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80030c4:	4b30      	ldr	r3, [pc, #192]	; (8003188 <HAL_GPIO_Init+0x350>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030e8:	4a27      	ldr	r2, [pc, #156]	; (8003188 <HAL_GPIO_Init+0x350>)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030ee:	4b26      	ldr	r3, [pc, #152]	; (8003188 <HAL_GPIO_Init+0x350>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	43db      	mvns	r3, r3
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4013      	ands	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003112:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <HAL_GPIO_Init+0x350>)
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <HAL_GPIO_Init+0x350>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	43db      	mvns	r3, r3
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800313c:	4a12      	ldr	r2, [pc, #72]	; (8003188 <HAL_GPIO_Init+0x350>)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	3301      	adds	r3, #1
 8003146:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa22 f303 	lsr.w	r3, r2, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	f47f ae78 	bne.w	8002e48 <HAL_GPIO_Init+0x10>
  }
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	40010000 	.word	0x40010000
 8003170:	48000400 	.word	0x48000400
 8003174:	48000800 	.word	0x48000800
 8003178:	48000c00 	.word	0x48000c00
 800317c:	48001000 	.word	0x48001000
 8003180:	48001400 	.word	0x48001400
 8003184:	48001800 	.word	0x48001800
 8003188:	40010400 	.word	0x40010400

0800318c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	887b      	ldrh	r3, [r7, #2]
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	e001      	b.n	80031ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031aa:	2300      	movs	r3, #0
 80031ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	807b      	strh	r3, [r7, #2]
 80031c8:	4613      	mov	r3, r2
 80031ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031cc:	787b      	ldrb	r3, [r7, #1]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031d2:	887a      	ldrh	r2, [r7, #2]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031d8:	e002      	b.n	80031e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031da:	887a      	ldrh	r2, [r7, #2]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031fe:	887a      	ldrh	r2, [r7, #2]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4013      	ands	r3, r2
 8003204:	041a      	lsls	r2, r3, #16
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	43d9      	mvns	r1, r3
 800320a:	887b      	ldrh	r3, [r7, #2]
 800320c:	400b      	ands	r3, r1
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	619a      	str	r2, [r3, #24]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <HAL_PWREx_GetVoltageRange+0x18>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40007000 	.word	0x40007000

0800323c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324a:	d130      	bne.n	80032ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800324c:	4b23      	ldr	r3, [pc, #140]	; (80032dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003258:	d038      	beq.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800325a:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003262:	4a1e      	ldr	r2, [pc, #120]	; (80032dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003268:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800326a:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2232      	movs	r2, #50	; 0x32
 8003270:	fb02 f303 	mul.w	r3, r2, r3
 8003274:	4a1b      	ldr	r2, [pc, #108]	; (80032e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0c9b      	lsrs	r3, r3, #18
 800327c:	3301      	adds	r3, #1
 800327e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003280:	e002      	b.n	8003288 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3b01      	subs	r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003288:	4b14      	ldr	r3, [pc, #80]	; (80032dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003294:	d102      	bne.n	800329c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f2      	bne.n	8003282 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800329c:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a8:	d110      	bne.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e00f      	b.n	80032ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ba:	d007      	beq.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032bc:	4b07      	ldr	r3, [pc, #28]	; (80032dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032c4:	4a05      	ldr	r2, [pc, #20]	; (80032dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40007000 	.word	0x40007000
 80032e0:	20000018 	.word	0x20000018
 80032e4:	431bde83 	.word	0x431bde83

080032e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e3d4      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032fa:	4ba1      	ldr	r3, [pc, #644]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003304:	4b9e      	ldr	r3, [pc, #632]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80e4 	beq.w	80034e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d007      	beq.n	8003332 <HAL_RCC_OscConfig+0x4a>
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b0c      	cmp	r3, #12
 8003326:	f040 808b 	bne.w	8003440 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b01      	cmp	r3, #1
 800332e:	f040 8087 	bne.w	8003440 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003332:	4b93      	ldr	r3, [pc, #588]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <HAL_RCC_OscConfig+0x62>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e3ac      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1a      	ldr	r2, [r3, #32]
 800334e:	4b8c      	ldr	r3, [pc, #560]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <HAL_RCC_OscConfig+0x7c>
 800335a:	4b89      	ldr	r3, [pc, #548]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003362:	e005      	b.n	8003370 <HAL_RCC_OscConfig+0x88>
 8003364:	4b86      	ldr	r3, [pc, #536]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 8003366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336a:	091b      	lsrs	r3, r3, #4
 800336c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003370:	4293      	cmp	r3, r2
 8003372:	d223      	bcs.n	80033bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fd41 	bl	8003e00 <RCC_SetFlashLatencyFromMSIRange>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e38d      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003388:	4b7d      	ldr	r3, [pc, #500]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a7c      	ldr	r2, [pc, #496]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 800338e:	f043 0308 	orr.w	r3, r3, #8
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4b7a      	ldr	r3, [pc, #488]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	4977      	ldr	r1, [pc, #476]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033a6:	4b76      	ldr	r3, [pc, #472]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	4972      	ldr	r1, [pc, #456]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
 80033ba:	e025      	b.n	8003408 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033bc:	4b70      	ldr	r3, [pc, #448]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a6f      	ldr	r2, [pc, #444]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 80033c2:	f043 0308 	orr.w	r3, r3, #8
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b6d      	ldr	r3, [pc, #436]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	496a      	ldr	r1, [pc, #424]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033da:	4b69      	ldr	r3, [pc, #420]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	4965      	ldr	r1, [pc, #404]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fd01 	bl	8003e00 <RCC_SetFlashLatencyFromMSIRange>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e34d      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003408:	f000 fc36 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b5c      	ldr	r3, [pc, #368]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	495a      	ldr	r1, [pc, #360]	; (8003584 <HAL_RCC_OscConfig+0x29c>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
 8003424:	4a58      	ldr	r2, [pc, #352]	; (8003588 <HAL_RCC_OscConfig+0x2a0>)
 8003426:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003428:	4b58      	ldr	r3, [pc, #352]	; (800358c <HAL_RCC_OscConfig+0x2a4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd ffbf 	bl	80013b0 <HAL_InitTick>
 8003432:	4603      	mov	r3, r0
 8003434:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d052      	beq.n	80034e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	e331      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d032      	beq.n	80034ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003448:	4b4d      	ldr	r3, [pc, #308]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a4c      	ldr	r2, [pc, #304]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003454:	f7fd fffc 	bl	8001450 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800345c:	f7fd fff8 	bl	8001450 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e31a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800346e:	4b44      	ldr	r3, [pc, #272]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800347a:	4b41      	ldr	r3, [pc, #260]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a40      	ldr	r2, [pc, #256]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 8003480:	f043 0308 	orr.w	r3, r3, #8
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	4b3e      	ldr	r3, [pc, #248]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	493b      	ldr	r1, [pc, #236]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003498:	4b39      	ldr	r3, [pc, #228]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	4936      	ldr	r1, [pc, #216]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]
 80034ac:	e01a      	b.n	80034e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034ae:	4b34      	ldr	r3, [pc, #208]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a33      	ldr	r2, [pc, #204]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ba:	f7fd ffc9 	bl	8001450 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034c2:	f7fd ffc5 	bl	8001450 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e2e7      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034d4:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f0      	bne.n	80034c2 <HAL_RCC_OscConfig+0x1da>
 80034e0:	e000      	b.n	80034e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d074      	beq.n	80035da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d005      	beq.n	8003502 <HAL_RCC_OscConfig+0x21a>
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b0c      	cmp	r3, #12
 80034fa:	d10e      	bne.n	800351a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d10b      	bne.n	800351a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003502:	4b1f      	ldr	r3, [pc, #124]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d064      	beq.n	80035d8 <HAL_RCC_OscConfig+0x2f0>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d160      	bne.n	80035d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e2c4      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x24a>
 8003524:	4b16      	ldr	r3, [pc, #88]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a15      	ldr	r2, [pc, #84]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 800352a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	e01d      	b.n	800356e <HAL_RCC_OscConfig+0x286>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800353a:	d10c      	bne.n	8003556 <HAL_RCC_OscConfig+0x26e>
 800353c:	4b10      	ldr	r3, [pc, #64]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 8003542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a0c      	ldr	r2, [pc, #48]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 800354e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	e00b      	b.n	800356e <HAL_RCC_OscConfig+0x286>
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a09      	ldr	r2, [pc, #36]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 800355c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b07      	ldr	r3, [pc, #28]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a06      	ldr	r2, [pc, #24]	; (8003580 <HAL_RCC_OscConfig+0x298>)
 8003568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01c      	beq.n	80035b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7fd ff6b 	bl	8001450 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800357c:	e011      	b.n	80035a2 <HAL_RCC_OscConfig+0x2ba>
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000
 8003584:	08006cdc 	.word	0x08006cdc
 8003588:	20000018 	.word	0x20000018
 800358c:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003590:	f7fd ff5e 	bl	8001450 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	; 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e280      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a2:	4baf      	ldr	r3, [pc, #700]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0x2a8>
 80035ae:	e014      	b.n	80035da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fd ff4e 	bl	8001450 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b8:	f7fd ff4a 	bl	8001450 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	; 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e26c      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ca:	4ba5      	ldr	r3, [pc, #660]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x2d0>
 80035d6:	e000      	b.n	80035da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d060      	beq.n	80036a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_OscConfig+0x310>
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	2b0c      	cmp	r3, #12
 80035f0:	d119      	bne.n	8003626 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d116      	bne.n	8003626 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035f8:	4b99      	ldr	r3, [pc, #612]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <HAL_RCC_OscConfig+0x328>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e249      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003610:	4b93      	ldr	r3, [pc, #588]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	061b      	lsls	r3, r3, #24
 800361e:	4990      	ldr	r1, [pc, #576]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 8003620:	4313      	orrs	r3, r2
 8003622:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003624:	e040      	b.n	80036a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d023      	beq.n	8003676 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800362e:	4b8c      	ldr	r3, [pc, #560]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a8b      	ldr	r2, [pc, #556]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 8003634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363a:	f7fd ff09 	bl	8001450 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003642:	f7fd ff05 	bl	8001450 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e227      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003654:	4b82      	ldr	r3, [pc, #520]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003660:	4b7f      	ldr	r3, [pc, #508]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	061b      	lsls	r3, r3, #24
 800366e:	497c      	ldr	r1, [pc, #496]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]
 8003674:	e018      	b.n	80036a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003676:	4b7a      	ldr	r3, [pc, #488]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a79      	ldr	r2, [pc, #484]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 800367c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fd fee5 	bl	8001450 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368a:	f7fd fee1 	bl	8001450 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e203      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800369c:	4b70      	ldr	r3, [pc, #448]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f0      	bne.n	800368a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d03c      	beq.n	800372e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01c      	beq.n	80036f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036bc:	4b68      	ldr	r3, [pc, #416]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80036be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c2:	4a67      	ldr	r2, [pc, #412]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fd fec0 	bl	8001450 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d4:	f7fd febc 	bl	8001450 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e1de      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036e6:	4b5e      	ldr	r3, [pc, #376]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80036e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ef      	beq.n	80036d4 <HAL_RCC_OscConfig+0x3ec>
 80036f4:	e01b      	b.n	800372e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f6:	4b5a      	ldr	r3, [pc, #360]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80036f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036fc:	4a58      	ldr	r2, [pc, #352]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003706:	f7fd fea3 	bl	8001450 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370e:	f7fd fe9f 	bl	8001450 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e1c1      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003720:	4b4f      	ldr	r3, [pc, #316]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 8003722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ef      	bne.n	800370e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80a6 	beq.w	8003888 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373c:	2300      	movs	r3, #0
 800373e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003740:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10d      	bne.n	8003768 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374c:	4b44      	ldr	r3, [pc, #272]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	4a43      	ldr	r2, [pc, #268]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 8003752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003756:	6593      	str	r3, [r2, #88]	; 0x58
 8003758:	4b41      	ldr	r3, [pc, #260]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 800375a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003764:	2301      	movs	r3, #1
 8003766:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003768:	4b3e      	ldr	r3, [pc, #248]	; (8003864 <HAL_RCC_OscConfig+0x57c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d118      	bne.n	80037a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003774:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <HAL_RCC_OscConfig+0x57c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a3a      	ldr	r2, [pc, #232]	; (8003864 <HAL_RCC_OscConfig+0x57c>)
 800377a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003780:	f7fd fe66 	bl	8001450 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003788:	f7fd fe62 	bl	8001450 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e184      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379a:	4b32      	ldr	r3, [pc, #200]	; (8003864 <HAL_RCC_OscConfig+0x57c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d108      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4d8>
 80037ae:	4b2c      	ldr	r3, [pc, #176]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b4:	4a2a      	ldr	r2, [pc, #168]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037be:	e024      	b.n	800380a <HAL_RCC_OscConfig+0x522>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	d110      	bne.n	80037ea <HAL_RCC_OscConfig+0x502>
 80037c8:	4b25      	ldr	r3, [pc, #148]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	4a24      	ldr	r2, [pc, #144]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80037d0:	f043 0304 	orr.w	r3, r3, #4
 80037d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037d8:	4b21      	ldr	r3, [pc, #132]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	4a20      	ldr	r2, [pc, #128]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037e8:	e00f      	b.n	800380a <HAL_RCC_OscConfig+0x522>
 80037ea:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80037ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f0:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037fa:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003800:	4a17      	ldr	r2, [pc, #92]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 8003802:	f023 0304 	bic.w	r3, r3, #4
 8003806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d016      	beq.n	8003840 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003812:	f7fd fe1d 	bl	8001450 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003818:	e00a      	b.n	8003830 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381a:	f7fd fe19 	bl	8001450 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	f241 3288 	movw	r2, #5000	; 0x1388
 8003828:	4293      	cmp	r3, r2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e139      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCC_OscConfig+0x578>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0ed      	beq.n	800381a <HAL_RCC_OscConfig+0x532>
 800383e:	e01a      	b.n	8003876 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003840:	f7fd fe06 	bl	8001450 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003846:	e00f      	b.n	8003868 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003848:	f7fd fe02 	bl	8001450 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	; 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d906      	bls.n	8003868 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e122      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003868:	4b90      	ldr	r3, [pc, #576]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e8      	bne.n	8003848 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003876:	7ffb      	ldrb	r3, [r7, #31]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387c:	4b8b      	ldr	r3, [pc, #556]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003880:	4a8a      	ldr	r2, [pc, #552]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 8003882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003886:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8108 	beq.w	8003aa2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	2b02      	cmp	r3, #2
 8003898:	f040 80d0 	bne.w	8003a3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800389c:	4b83      	ldr	r3, [pc, #524]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f003 0203 	and.w	r2, r3, #3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d130      	bne.n	8003912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	3b01      	subs	r3, #1
 80038bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d127      	bne.n	8003912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d11f      	bne.n	8003912 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038dc:	2a07      	cmp	r2, #7
 80038de:	bf14      	ite	ne
 80038e0:	2201      	movne	r2, #1
 80038e2:	2200      	moveq	r2, #0
 80038e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d113      	bne.n	8003912 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	3b01      	subs	r3, #1
 80038f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	3b01      	subs	r3, #1
 800390c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d06e      	beq.n	80039f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b0c      	cmp	r3, #12
 8003916:	d069      	beq.n	80039ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003918:	4b64      	ldr	r3, [pc, #400]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d105      	bne.n	8003930 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003924:	4b61      	ldr	r3, [pc, #388]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0b7      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003934:	4b5d      	ldr	r3, [pc, #372]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a5c      	ldr	r2, [pc, #368]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 800393a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800393e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003940:	f7fd fd86 	bl	8001450 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fd fd82 	bl	8001450 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e0a4      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800395a:	4b54      	ldr	r3, [pc, #336]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003966:	4b51      	ldr	r3, [pc, #324]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	4b51      	ldr	r3, [pc, #324]	; (8003ab0 <HAL_RCC_OscConfig+0x7c8>)
 800396c:	4013      	ands	r3, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003976:	3a01      	subs	r2, #1
 8003978:	0112      	lsls	r2, r2, #4
 800397a:	4311      	orrs	r1, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003980:	0212      	lsls	r2, r2, #8
 8003982:	4311      	orrs	r1, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003988:	0852      	lsrs	r2, r2, #1
 800398a:	3a01      	subs	r2, #1
 800398c:	0552      	lsls	r2, r2, #21
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003994:	0852      	lsrs	r2, r2, #1
 8003996:	3a01      	subs	r2, #1
 8003998:	0652      	lsls	r2, r2, #25
 800399a:	4311      	orrs	r1, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039a0:	0912      	lsrs	r2, r2, #4
 80039a2:	0452      	lsls	r2, r2, #17
 80039a4:	430a      	orrs	r2, r1
 80039a6:	4941      	ldr	r1, [pc, #260]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039ac:	4b3f      	ldr	r3, [pc, #252]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a3e      	ldr	r2, [pc, #248]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 80039b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039b8:	4b3c      	ldr	r3, [pc, #240]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a3b      	ldr	r2, [pc, #236]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 80039be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039c4:	f7fd fd44 	bl	8001450 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fd fd40 	bl	8001450 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e062      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039de:	4b33      	ldr	r3, [pc, #204]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ea:	e05a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e059      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f0:	4b2e      	ldr	r3, [pc, #184]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d152      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039fc:	4b2b      	ldr	r3, [pc, #172]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a2a      	ldr	r2, [pc, #168]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 8003a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a08:	4b28      	ldr	r3, [pc, #160]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4a27      	ldr	r2, [pc, #156]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 8003a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a14:	f7fd fd1c 	bl	8001450 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1c:	f7fd fd18 	bl	8001450 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e03a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2e:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0x734>
 8003a3a:	e032      	b.n	8003aa2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b0c      	cmp	r3, #12
 8003a40:	d02d      	beq.n	8003a9e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a42:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a19      	ldr	r2, [pc, #100]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 8003a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a4c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003a4e:	4b17      	ldr	r3, [pc, #92]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a5a:	4b14      	ldr	r3, [pc, #80]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	4a13      	ldr	r2, [pc, #76]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 8003a60:	f023 0303 	bic.w	r3, r3, #3
 8003a64:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a66:	4b11      	ldr	r3, [pc, #68]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	4a10      	ldr	r2, [pc, #64]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 8003a6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fd fceb 	bl	8001450 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7e:	f7fd fce7 	bl	8001450 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e009      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <HAL_RCC_OscConfig+0x7c4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1f0      	bne.n	8003a7e <HAL_RCC_OscConfig+0x796>
 8003a9c:	e001      	b.n	8003aa2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3720      	adds	r7, #32
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	f99d808c 	.word	0xf99d808c

08003ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0c8      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b66      	ldr	r3, [pc, #408]	; (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d910      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b63      	ldr	r3, [pc, #396]	; (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 0207 	bic.w	r2, r3, #7
 8003ade:	4961      	ldr	r1, [pc, #388]	; (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b5f      	ldr	r3, [pc, #380]	; (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0b0      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d04c      	beq.n	8003b9e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d107      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0c:	4b56      	ldr	r3, [pc, #344]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d121      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e09e      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b24:	4b50      	ldr	r3, [pc, #320]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d115      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e092      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d107      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b3c:	4b4a      	ldr	r3, [pc, #296]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d109      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e086      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b4c:	4b46      	ldr	r3, [pc, #280]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e07e      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b5c:	4b42      	ldr	r3, [pc, #264]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f023 0203 	bic.w	r2, r3, #3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	493f      	ldr	r1, [pc, #252]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b6e:	f7fd fc6f 	bl	8001450 <HAL_GetTick>
 8003b72:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b76:	f7fd fc6b 	bl	8001450 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e066      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8c:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 020c 	and.w	r2, r3, #12
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d1eb      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003baa:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	492c      	ldr	r1, [pc, #176]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bbc:	4b29      	ldr	r3, [pc, #164]	; (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d210      	bcs.n	8003bec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	4b26      	ldr	r3, [pc, #152]	; (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 0207 	bic.w	r2, r3, #7
 8003bd2:	4924      	ldr	r1, [pc, #144]	; (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <HAL_RCC_ClockConfig+0x1b0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e036      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4918      	ldr	r1, [pc, #96]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c16:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4910      	ldr	r1, [pc, #64]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c2a:	f000 f825 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <HAL_RCC_ClockConfig+0x1b4>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	490c      	ldr	r1, [pc, #48]	; (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	5ccb      	ldrb	r3, [r1, r3]
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	fa22 f303 	lsr.w	r3, r2, r3
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fd fbae 	bl	80013b0 <HAL_InitTick>
 8003c54:	4603      	mov	r3, r0
 8003c56:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c58:	7afb      	ldrb	r3, [r7, #11]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40022000 	.word	0x40022000
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	08006cdc 	.word	0x08006cdc
 8003c70:	20000018 	.word	0x20000018
 8003c74:	2000001c 	.word	0x2000001c

08003c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	; 0x24
 8003c7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c86:	4b3e      	ldr	r3, [pc, #248]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c90:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_RCC_GetSysClockFreq+0x34>
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	d121      	bne.n	8003cea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d11e      	bne.n	8003cea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cac:	4b34      	ldr	r3, [pc, #208]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d107      	bne.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cb8:	4b31      	ldr	r3, [pc, #196]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cbe:	0a1b      	lsrs	r3, r3, #8
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	e005      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cc8:	4b2d      	ldr	r3, [pc, #180]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	091b      	lsrs	r3, r3, #4
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003cd4:	4a2b      	ldr	r2, [pc, #172]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10d      	bne.n	8003d00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d102      	bne.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cf0:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	e004      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cfc:	4b23      	ldr	r3, [pc, #140]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x114>)
 8003cfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d134      	bne.n	8003d70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d06:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d003      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0xa6>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d003      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0xac>
 8003d1c:	e005      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d1e:	4b1a      	ldr	r3, [pc, #104]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d20:	617b      	str	r3, [r7, #20]
      break;
 8003d22:	e005      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d24:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x114>)
 8003d26:	617b      	str	r3, [r7, #20]
      break;
 8003d28:	e002      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	617b      	str	r3, [r7, #20]
      break;
 8003d2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d30:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	fb02 f203 	mul.w	r2, r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d56:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	0e5b      	lsrs	r3, r3, #25
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	3301      	adds	r3, #1
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d70:	69bb      	ldr	r3, [r7, #24]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3724      	adds	r7, #36	; 0x24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	08006cf4 	.word	0x08006cf4
 8003d88:	00f42400 	.word	0x00f42400
 8003d8c:	007a1200 	.word	0x007a1200

08003d90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d94:	4b03      	ldr	r3, [pc, #12]	; (8003da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d96:	681b      	ldr	r3, [r3, #0]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000018 	.word	0x20000018

08003da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dac:	f7ff fff0 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4904      	ldr	r1, [pc, #16]	; (8003dd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	08006cec 	.word	0x08006cec

08003dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dd8:	f7ff ffda 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	0adb      	lsrs	r3, r3, #11
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4904      	ldr	r1, [pc, #16]	; (8003dfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dea:	5ccb      	ldrb	r3, [r1, r3]
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	08006cec 	.word	0x08006cec

08003e00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e08:	2300      	movs	r3, #0
 8003e0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e0c:	4b2a      	ldr	r3, [pc, #168]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e18:	f7ff fa02 	bl	8003220 <HAL_PWREx_GetVoltageRange>
 8003e1c:	6178      	str	r0, [r7, #20]
 8003e1e:	e014      	b.n	8003e4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e20:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	4a24      	ldr	r2, [pc, #144]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e2c:	4b22      	ldr	r3, [pc, #136]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e38:	f7ff f9f2 	bl	8003220 <HAL_PWREx_GetVoltageRange>
 8003e3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e3e:	4b1e      	ldr	r3, [pc, #120]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e42:	4a1d      	ldr	r2, [pc, #116]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e50:	d10b      	bne.n	8003e6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b80      	cmp	r3, #128	; 0x80
 8003e56:	d919      	bls.n	8003e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2ba0      	cmp	r3, #160	; 0xa0
 8003e5c:	d902      	bls.n	8003e64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e5e:	2302      	movs	r3, #2
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	e013      	b.n	8003e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e64:	2301      	movs	r3, #1
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	e010      	b.n	8003e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b80      	cmp	r3, #128	; 0x80
 8003e6e:	d902      	bls.n	8003e76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e70:	2303      	movs	r3, #3
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	e00a      	b.n	8003e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b80      	cmp	r3, #128	; 0x80
 8003e7a:	d102      	bne.n	8003e82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	e004      	b.n	8003e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b70      	cmp	r3, #112	; 0x70
 8003e86:	d101      	bne.n	8003e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e88:	2301      	movs	r3, #1
 8003e8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 0207 	bic.w	r2, r3, #7
 8003e94:	4909      	ldr	r1, [pc, #36]	; (8003ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e9c:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d001      	beq.n	8003eae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40022000 	.word	0x40022000

08003ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ec8:	2300      	movs	r3, #0
 8003eca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ecc:	2300      	movs	r3, #0
 8003ece:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d041      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ee4:	d02a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ee6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003eea:	d824      	bhi.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003eec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ef0:	d008      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ef2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ef6:	d81e      	bhi.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f00:	d010      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f02:	e018      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f04:	4b86      	ldr	r3, [pc, #536]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4a85      	ldr	r2, [pc, #532]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f10:	e015      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3304      	adds	r3, #4
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fabb 	bl	8004494 <RCCEx_PLLSAI1_Config>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f22:	e00c      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3320      	adds	r3, #32
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fba6 	bl	800467c <RCCEx_PLLSAI2_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f34:	e003      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	74fb      	strb	r3, [r7, #19]
      break;
 8003f3a:	e000      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f3e:	7cfb      	ldrb	r3, [r7, #19]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10b      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f44:	4b76      	ldr	r3, [pc, #472]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f52:	4973      	ldr	r1, [pc, #460]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f5a:	e001      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5c:	7cfb      	ldrb	r3, [r7, #19]
 8003f5e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d041      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f74:	d02a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f7a:	d824      	bhi.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f80:	d008      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f86:	d81e      	bhi.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f90:	d010      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f92:	e018      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f94:	4b62      	ldr	r3, [pc, #392]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a61      	ldr	r2, [pc, #388]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fa0:	e015      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fa73 	bl	8004494 <RCCEx_PLLSAI1_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fb2:	e00c      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3320      	adds	r3, #32
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fb5e 	bl	800467c <RCCEx_PLLSAI2_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fc4:	e003      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	74fb      	strb	r3, [r7, #19]
      break;
 8003fca:	e000      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fce:	7cfb      	ldrb	r3, [r7, #19]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10b      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fd4:	4b52      	ldr	r3, [pc, #328]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe2:	494f      	ldr	r1, [pc, #316]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fea:	e001      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80a0 	beq.w	800413e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffe:	2300      	movs	r3, #0
 8004000:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004002:	4b47      	ldr	r3, [pc, #284]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004012:	2300      	movs	r3, #0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00d      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004018:	4b41      	ldr	r3, [pc, #260]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401c:	4a40      	ldr	r2, [pc, #256]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004022:	6593      	str	r3, [r2, #88]	; 0x58
 8004024:	4b3e      	ldr	r3, [pc, #248]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004030:	2301      	movs	r3, #1
 8004032:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004034:	4b3b      	ldr	r3, [pc, #236]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a3a      	ldr	r2, [pc, #232]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800403a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004040:	f7fd fa06 	bl	8001450 <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004046:	e009      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004048:	f7fd fa02 	bl	8001450 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d902      	bls.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	74fb      	strb	r3, [r7, #19]
        break;
 800405a:	e005      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800405c:	4b31      	ldr	r3, [pc, #196]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ef      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004068:	7cfb      	ldrb	r3, [r7, #19]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d15c      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800406e:	4b2c      	ldr	r3, [pc, #176]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004078:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01f      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	429a      	cmp	r2, r3
 800408a:	d019      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800408c:	4b24      	ldr	r3, [pc, #144]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004096:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004098:	4b21      	ldr	r3, [pc, #132]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	4a20      	ldr	r2, [pc, #128]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040a8:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ae:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040b8:	4a19      	ldr	r2, [pc, #100]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ca:	f7fd f9c1 	bl	8001450 <HAL_GetTick>
 80040ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d0:	e00b      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d2:	f7fd f9bd 	bl	8001450 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d902      	bls.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	74fb      	strb	r3, [r7, #19]
            break;
 80040e8:	e006      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ea:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ec      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040f8:	7cfb      	ldrb	r3, [r7, #19]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10c      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040fe:	4b08      	ldr	r3, [pc, #32]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800410e:	4904      	ldr	r1, [pc, #16]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004116:	e009      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004118:	7cfb      	ldrb	r3, [r7, #19]
 800411a:	74bb      	strb	r3, [r7, #18]
 800411c:	e006      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000
 8004124:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800412c:	7c7b      	ldrb	r3, [r7, #17]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d105      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004132:	4b9e      	ldr	r3, [pc, #632]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004136:	4a9d      	ldr	r2, [pc, #628]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800413c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800414a:	4b98      	ldr	r3, [pc, #608]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	f023 0203 	bic.w	r2, r3, #3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	4994      	ldr	r1, [pc, #592]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800416c:	4b8f      	ldr	r3, [pc, #572]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	f023 020c 	bic.w	r2, r3, #12
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	498c      	ldr	r1, [pc, #560]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800418e:	4b87      	ldr	r3, [pc, #540]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004194:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	4983      	ldr	r1, [pc, #524]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041b0:	4b7e      	ldr	r3, [pc, #504]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041be:	497b      	ldr	r1, [pc, #492]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041d2:	4b76      	ldr	r3, [pc, #472]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e0:	4972      	ldr	r1, [pc, #456]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041f4:	4b6d      	ldr	r3, [pc, #436]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004202:	496a      	ldr	r1, [pc, #424]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004216:	4b65      	ldr	r3, [pc, #404]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004224:	4961      	ldr	r1, [pc, #388]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004238:	4b5c      	ldr	r3, [pc, #368]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004246:	4959      	ldr	r1, [pc, #356]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800425a:	4b54      	ldr	r3, [pc, #336]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004268:	4950      	ldr	r1, [pc, #320]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800427c:	4b4b      	ldr	r3, [pc, #300]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	4948      	ldr	r1, [pc, #288]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800429e:	4b43      	ldr	r3, [pc, #268]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	493f      	ldr	r1, [pc, #252]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d028      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042c0:	4b3a      	ldr	r3, [pc, #232]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ce:	4937      	ldr	r1, [pc, #220]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042de:	d106      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e0:	4b32      	ldr	r3, [pc, #200]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	4a31      	ldr	r2, [pc, #196]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ea:	60d3      	str	r3, [r2, #12]
 80042ec:	e011      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042f6:	d10c      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3304      	adds	r3, #4
 80042fc:	2101      	movs	r1, #1
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 f8c8 	bl	8004494 <RCCEx_PLLSAI1_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800430e:	7cfb      	ldrb	r3, [r7, #19]
 8004310:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d028      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800431e:	4b23      	ldr	r3, [pc, #140]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004324:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432c:	491f      	ldr	r1, [pc, #124]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800433c:	d106      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800433e:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	4a1a      	ldr	r2, [pc, #104]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004348:	60d3      	str	r3, [r2, #12]
 800434a:	e011      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004354:	d10c      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3304      	adds	r3, #4
 800435a:	2101      	movs	r1, #1
 800435c:	4618      	mov	r0, r3
 800435e:	f000 f899 	bl	8004494 <RCCEx_PLLSAI1_Config>
 8004362:	4603      	mov	r3, r0
 8004364:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004366:	7cfb      	ldrb	r3, [r7, #19]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800436c:	7cfb      	ldrb	r3, [r7, #19]
 800436e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d02b      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438a:	4908      	ldr	r1, [pc, #32]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800439a:	d109      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4a02      	ldr	r2, [pc, #8]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043a6:	60d3      	str	r3, [r2, #12]
 80043a8:	e014      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3304      	adds	r3, #4
 80043be:	2101      	movs	r1, #1
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 f867 	bl	8004494 <RCCEx_PLLSAI1_Config>
 80043c6:	4603      	mov	r3, r0
 80043c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ca:	7cfb      	ldrb	r3, [r7, #19]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043d0:	7cfb      	ldrb	r3, [r7, #19]
 80043d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d02f      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043e0:	4b2b      	ldr	r3, [pc, #172]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ee:	4928      	ldr	r1, [pc, #160]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043fe:	d10d      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3304      	adds	r3, #4
 8004404:	2102      	movs	r1, #2
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f844 	bl	8004494 <RCCEx_PLLSAI1_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004410:	7cfb      	ldrb	r3, [r7, #19]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d014      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004416:	7cfb      	ldrb	r3, [r7, #19]
 8004418:	74bb      	strb	r3, [r7, #18]
 800441a:	e011      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004424:	d10c      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3320      	adds	r3, #32
 800442a:	2102      	movs	r1, #2
 800442c:	4618      	mov	r0, r3
 800442e:	f000 f925 	bl	800467c <RCCEx_PLLSAI2_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004436:	7cfb      	ldrb	r3, [r7, #19]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800443c:	7cfb      	ldrb	r3, [r7, #19]
 800443e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800444c:	4b10      	ldr	r3, [pc, #64]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800445a:	490d      	ldr	r1, [pc, #52]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00b      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800446e:	4b08      	ldr	r3, [pc, #32]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004474:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800447e:	4904      	ldr	r1, [pc, #16]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004486:	7cbb      	ldrb	r3, [r7, #18]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40021000 	.word	0x40021000

08004494 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044a2:	4b75      	ldr	r3, [pc, #468]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d018      	beq.n	80044e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044ae:	4b72      	ldr	r3, [pc, #456]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f003 0203 	and.w	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d10d      	bne.n	80044da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
       ||
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d009      	beq.n	80044da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044c6:	4b6c      	ldr	r3, [pc, #432]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
       ||
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d047      	beq.n	800456a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	73fb      	strb	r3, [r7, #15]
 80044de:	e044      	b.n	800456a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d018      	beq.n	800451a <RCCEx_PLLSAI1_Config+0x86>
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d825      	bhi.n	8004538 <RCCEx_PLLSAI1_Config+0xa4>
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d002      	beq.n	80044f6 <RCCEx_PLLSAI1_Config+0x62>
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d009      	beq.n	8004508 <RCCEx_PLLSAI1_Config+0x74>
 80044f4:	e020      	b.n	8004538 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044f6:	4b60      	ldr	r3, [pc, #384]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d11d      	bne.n	800453e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004506:	e01a      	b.n	800453e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004508:	4b5b      	ldr	r3, [pc, #364]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004510:	2b00      	cmp	r3, #0
 8004512:	d116      	bne.n	8004542 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004518:	e013      	b.n	8004542 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800451a:	4b57      	ldr	r3, [pc, #348]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10f      	bne.n	8004546 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004526:	4b54      	ldr	r3, [pc, #336]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004536:	e006      	b.n	8004546 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	73fb      	strb	r3, [r7, #15]
      break;
 800453c:	e004      	b.n	8004548 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800453e:	bf00      	nop
 8004540:	e002      	b.n	8004548 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004542:	bf00      	nop
 8004544:	e000      	b.n	8004548 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004546:	bf00      	nop
    }

    if(status == HAL_OK)
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10d      	bne.n	800456a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800454e:	4b4a      	ldr	r3, [pc, #296]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6819      	ldr	r1, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	3b01      	subs	r3, #1
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	430b      	orrs	r3, r1
 8004564:	4944      	ldr	r1, [pc, #272]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d17d      	bne.n	800466c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004570:	4b41      	ldr	r3, [pc, #260]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a40      	ldr	r2, [pc, #256]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004576:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800457a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800457c:	f7fc ff68 	bl	8001450 <HAL_GetTick>
 8004580:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004582:	e009      	b.n	8004598 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004584:	f7fc ff64 	bl	8001450 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d902      	bls.n	8004598 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	73fb      	strb	r3, [r7, #15]
        break;
 8004596:	e005      	b.n	80045a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004598:	4b37      	ldr	r3, [pc, #220]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1ef      	bne.n	8004584 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d160      	bne.n	800466c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d111      	bne.n	80045d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045b0:	4b31      	ldr	r3, [pc, #196]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6892      	ldr	r2, [r2, #8]
 80045c0:	0211      	lsls	r1, r2, #8
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68d2      	ldr	r2, [r2, #12]
 80045c6:	0912      	lsrs	r2, r2, #4
 80045c8:	0452      	lsls	r2, r2, #17
 80045ca:	430a      	orrs	r2, r1
 80045cc:	492a      	ldr	r1, [pc, #168]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	610b      	str	r3, [r1, #16]
 80045d2:	e027      	b.n	8004624 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d112      	bne.n	8004600 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045da:	4b27      	ldr	r3, [pc, #156]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6892      	ldr	r2, [r2, #8]
 80045ea:	0211      	lsls	r1, r2, #8
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6912      	ldr	r2, [r2, #16]
 80045f0:	0852      	lsrs	r2, r2, #1
 80045f2:	3a01      	subs	r2, #1
 80045f4:	0552      	lsls	r2, r2, #21
 80045f6:	430a      	orrs	r2, r1
 80045f8:	491f      	ldr	r1, [pc, #124]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	610b      	str	r3, [r1, #16]
 80045fe:	e011      	b.n	8004624 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004600:	4b1d      	ldr	r3, [pc, #116]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004608:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6892      	ldr	r2, [r2, #8]
 8004610:	0211      	lsls	r1, r2, #8
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6952      	ldr	r2, [r2, #20]
 8004616:	0852      	lsrs	r2, r2, #1
 8004618:	3a01      	subs	r2, #1
 800461a:	0652      	lsls	r2, r2, #25
 800461c:	430a      	orrs	r2, r1
 800461e:	4916      	ldr	r1, [pc, #88]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004620:	4313      	orrs	r3, r2
 8004622:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004624:	4b14      	ldr	r3, [pc, #80]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a13      	ldr	r2, [pc, #76]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 800462a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800462e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004630:	f7fc ff0e 	bl	8001450 <HAL_GetTick>
 8004634:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004636:	e009      	b.n	800464c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004638:	f7fc ff0a 	bl	8001450 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d902      	bls.n	800464c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	73fb      	strb	r3, [r7, #15]
          break;
 800464a:	e005      	b.n	8004658 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ef      	beq.n	8004638 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800465e:	4b06      	ldr	r3, [pc, #24]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	4904      	ldr	r1, [pc, #16]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004668:	4313      	orrs	r3, r2
 800466a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800466c:	7bfb      	ldrb	r3, [r7, #15]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40021000 	.word	0x40021000

0800467c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800468a:	4b6a      	ldr	r3, [pc, #424]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d018      	beq.n	80046c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004696:	4b67      	ldr	r3, [pc, #412]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0203 	and.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d10d      	bne.n	80046c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
       ||
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046ae:	4b61      	ldr	r3, [pc, #388]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
       ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d047      	beq.n	8004752 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
 80046c6:	e044      	b.n	8004752 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d018      	beq.n	8004702 <RCCEx_PLLSAI2_Config+0x86>
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d825      	bhi.n	8004720 <RCCEx_PLLSAI2_Config+0xa4>
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d002      	beq.n	80046de <RCCEx_PLLSAI2_Config+0x62>
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d009      	beq.n	80046f0 <RCCEx_PLLSAI2_Config+0x74>
 80046dc:	e020      	b.n	8004720 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046de:	4b55      	ldr	r3, [pc, #340]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d11d      	bne.n	8004726 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ee:	e01a      	b.n	8004726 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046f0:	4b50      	ldr	r3, [pc, #320]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d116      	bne.n	800472a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004700:	e013      	b.n	800472a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004702:	4b4c      	ldr	r3, [pc, #304]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10f      	bne.n	800472e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800470e:	4b49      	ldr	r3, [pc, #292]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800471e:	e006      	b.n	800472e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	73fb      	strb	r3, [r7, #15]
      break;
 8004724:	e004      	b.n	8004730 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004726:	bf00      	nop
 8004728:	e002      	b.n	8004730 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800472a:	bf00      	nop
 800472c:	e000      	b.n	8004730 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800472e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10d      	bne.n	8004752 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004736:	4b3f      	ldr	r3, [pc, #252]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	3b01      	subs	r3, #1
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	430b      	orrs	r3, r1
 800474c:	4939      	ldr	r1, [pc, #228]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800474e:	4313      	orrs	r3, r2
 8004750:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d167      	bne.n	8004828 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004758:	4b36      	ldr	r3, [pc, #216]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a35      	ldr	r2, [pc, #212]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004764:	f7fc fe74 	bl	8001450 <HAL_GetTick>
 8004768:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800476a:	e009      	b.n	8004780 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800476c:	f7fc fe70 	bl	8001450 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d902      	bls.n	8004780 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	73fb      	strb	r3, [r7, #15]
        break;
 800477e:	e005      	b.n	800478c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004780:	4b2c      	ldr	r3, [pc, #176]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1ef      	bne.n	800476c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d14a      	bne.n	8004828 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d111      	bne.n	80047bc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004798:	4b26      	ldr	r3, [pc, #152]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6892      	ldr	r2, [r2, #8]
 80047a8:	0211      	lsls	r1, r2, #8
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	68d2      	ldr	r2, [r2, #12]
 80047ae:	0912      	lsrs	r2, r2, #4
 80047b0:	0452      	lsls	r2, r2, #17
 80047b2:	430a      	orrs	r2, r1
 80047b4:	491f      	ldr	r1, [pc, #124]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	614b      	str	r3, [r1, #20]
 80047ba:	e011      	b.n	80047e0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047bc:	4b1d      	ldr	r3, [pc, #116]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6892      	ldr	r2, [r2, #8]
 80047cc:	0211      	lsls	r1, r2, #8
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6912      	ldr	r2, [r2, #16]
 80047d2:	0852      	lsrs	r2, r2, #1
 80047d4:	3a01      	subs	r2, #1
 80047d6:	0652      	lsls	r2, r2, #25
 80047d8:	430a      	orrs	r2, r1
 80047da:	4916      	ldr	r1, [pc, #88]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047e0:	4b14      	ldr	r3, [pc, #80]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a13      	ldr	r2, [pc, #76]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ec:	f7fc fe30 	bl	8001450 <HAL_GetTick>
 80047f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047f2:	e009      	b.n	8004808 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047f4:	f7fc fe2c 	bl	8001450 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d902      	bls.n	8004808 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	73fb      	strb	r3, [r7, #15]
          break;
 8004806:	e005      	b.n	8004814 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004808:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0ef      	beq.n	80047f4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	4904      	ldr	r1, [pc, #16]	; (8004834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004824:	4313      	orrs	r3, r2
 8004826:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004828:	7bfb      	ldrb	r3, [r7, #15]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40021000 	.word	0x40021000

08004838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e049      	b.n	80048de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fc fbd2 	bl	8001008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3304      	adds	r3, #4
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f000 fc1a 	bl	80050b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d001      	beq.n	8004900 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e04f      	b.n	80049a0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a23      	ldr	r2, [pc, #140]	; (80049ac <HAL_TIM_Base_Start_IT+0xc4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01d      	beq.n	800495e <HAL_TIM_Base_Start_IT+0x76>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492a:	d018      	beq.n	800495e <HAL_TIM_Base_Start_IT+0x76>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1f      	ldr	r2, [pc, #124]	; (80049b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <HAL_TIM_Base_Start_IT+0x76>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1e      	ldr	r2, [pc, #120]	; (80049b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00e      	beq.n	800495e <HAL_TIM_Base_Start_IT+0x76>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d009      	beq.n	800495e <HAL_TIM_Base_Start_IT+0x76>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1b      	ldr	r2, [pc, #108]	; (80049bc <HAL_TIM_Base_Start_IT+0xd4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d004      	beq.n	800495e <HAL_TIM_Base_Start_IT+0x76>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a19      	ldr	r2, [pc, #100]	; (80049c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d115      	bne.n	800498a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	4b17      	ldr	r3, [pc, #92]	; (80049c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004966:	4013      	ands	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b06      	cmp	r3, #6
 800496e:	d015      	beq.n	800499c <HAL_TIM_Base_Start_IT+0xb4>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004976:	d011      	beq.n	800499c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004988:	e008      	b.n	800499c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0201 	orr.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	e000      	b.n	800499e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800
 80049b8:	40000c00 	.word	0x40000c00
 80049bc:	40013400 	.word	0x40013400
 80049c0:	40014000 	.word	0x40014000
 80049c4:	00010007 	.word	0x00010007

080049c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e049      	b.n	8004a6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fc fb4a 	bl	8001088 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f000 fb52 	bl	80050b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d122      	bne.n	8004ad2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d11b      	bne.n	8004ad2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f06f 0202 	mvn.w	r2, #2
 8004aa2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fadb 	bl	8005074 <HAL_TIM_IC_CaptureCallback>
 8004abe:	e005      	b.n	8004acc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 facd 	bl	8005060 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fade 	bl	8005088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d122      	bne.n	8004b26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d11b      	bne.n	8004b26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f06f 0204 	mvn.w	r2, #4
 8004af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fab1 	bl	8005074 <HAL_TIM_IC_CaptureCallback>
 8004b12:	e005      	b.n	8004b20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 faa3 	bl	8005060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fab4 	bl	8005088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d122      	bne.n	8004b7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d11b      	bne.n	8004b7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f06f 0208 	mvn.w	r2, #8
 8004b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2204      	movs	r2, #4
 8004b50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fa87 	bl	8005074 <HAL_TIM_IC_CaptureCallback>
 8004b66:	e005      	b.n	8004b74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fa79 	bl	8005060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fa8a 	bl	8005088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b10      	cmp	r3, #16
 8004b86:	d122      	bne.n	8004bce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d11b      	bne.n	8004bce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f06f 0210 	mvn.w	r2, #16
 8004b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fa5d 	bl	8005074 <HAL_TIM_IC_CaptureCallback>
 8004bba:	e005      	b.n	8004bc8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fa4f 	bl	8005060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa60 	bl	8005088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d10e      	bne.n	8004bfa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d107      	bne.n	8004bfa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f06f 0201 	mvn.w	r2, #1
 8004bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7fc f8fd 	bl	8000df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c04:	2b80      	cmp	r3, #128	; 0x80
 8004c06:	d10e      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	2b80      	cmp	r3, #128	; 0x80
 8004c14:	d107      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fee1 	bl	80059e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c34:	d10e      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c40:	2b80      	cmp	r3, #128	; 0x80
 8004c42:	d107      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fed4 	bl	80059fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5e:	2b40      	cmp	r3, #64	; 0x40
 8004c60:	d10e      	bne.n	8004c80 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d107      	bne.n	8004c80 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fa0e 	bl	800509c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d10e      	bne.n	8004cac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	d107      	bne.n	8004cac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0220 	mvn.w	r2, #32
 8004ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fe94 	bl	80059d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cac:	bf00      	nop
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e0fd      	b.n	8004eca <HAL_TIM_PWM_ConfigChannel+0x216>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b14      	cmp	r3, #20
 8004cda:	f200 80f0 	bhi.w	8004ebe <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004cde:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce4:	08004d39 	.word	0x08004d39
 8004ce8:	08004ebf 	.word	0x08004ebf
 8004cec:	08004ebf 	.word	0x08004ebf
 8004cf0:	08004ebf 	.word	0x08004ebf
 8004cf4:	08004d79 	.word	0x08004d79
 8004cf8:	08004ebf 	.word	0x08004ebf
 8004cfc:	08004ebf 	.word	0x08004ebf
 8004d00:	08004ebf 	.word	0x08004ebf
 8004d04:	08004dbb 	.word	0x08004dbb
 8004d08:	08004ebf 	.word	0x08004ebf
 8004d0c:	08004ebf 	.word	0x08004ebf
 8004d10:	08004ebf 	.word	0x08004ebf
 8004d14:	08004dfb 	.word	0x08004dfb
 8004d18:	08004ebf 	.word	0x08004ebf
 8004d1c:	08004ebf 	.word	0x08004ebf
 8004d20:	08004ebf 	.word	0x08004ebf
 8004d24:	08004e3d 	.word	0x08004e3d
 8004d28:	08004ebf 	.word	0x08004ebf
 8004d2c:	08004ebf 	.word	0x08004ebf
 8004d30:	08004ebf 	.word	0x08004ebf
 8004d34:	08004e7d 	.word	0x08004e7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fa50 	bl	80051e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0208 	orr.w	r2, r2, #8
 8004d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0204 	bic.w	r2, r2, #4
 8004d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6999      	ldr	r1, [r3, #24]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	619a      	str	r2, [r3, #24]
      break;
 8004d76:	e0a3      	b.n	8004ec0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fac0 	bl	8005304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6999      	ldr	r1, [r3, #24]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	021a      	lsls	r2, r3, #8
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	619a      	str	r2, [r3, #24]
      break;
 8004db8:	e082      	b.n	8004ec0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fb29 	bl	8005418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0208 	orr.w	r2, r2, #8
 8004dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0204 	bic.w	r2, r2, #4
 8004de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69d9      	ldr	r1, [r3, #28]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	61da      	str	r2, [r3, #28]
      break;
 8004df8:	e062      	b.n	8004ec0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fb91 	bl	8005528 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69d9      	ldr	r1, [r3, #28]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	021a      	lsls	r2, r3, #8
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	61da      	str	r2, [r3, #28]
      break;
 8004e3a:	e041      	b.n	8004ec0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68b9      	ldr	r1, [r7, #8]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fbda 	bl	80055fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0208 	orr.w	r2, r2, #8
 8004e56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0204 	bic.w	r2, r2, #4
 8004e66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	691a      	ldr	r2, [r3, #16]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e7a:	e021      	b.n	8004ec0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fc1e 	bl	80056c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	021a      	lsls	r2, r3, #8
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ebc:	e000      	b.n	8004ec0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004ebe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop

08004ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_TIM_ConfigClockSource+0x18>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e0b5      	b.n	8005058 <HAL_TIM_ConfigClockSource+0x184>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f28:	d03e      	beq.n	8004fa8 <HAL_TIM_ConfigClockSource+0xd4>
 8004f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f2e:	f200 8087 	bhi.w	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f36:	f000 8085 	beq.w	8005044 <HAL_TIM_ConfigClockSource+0x170>
 8004f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3e:	d87f      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f40:	2b70      	cmp	r3, #112	; 0x70
 8004f42:	d01a      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0xa6>
 8004f44:	2b70      	cmp	r3, #112	; 0x70
 8004f46:	d87b      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f48:	2b60      	cmp	r3, #96	; 0x60
 8004f4a:	d050      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x11a>
 8004f4c:	2b60      	cmp	r3, #96	; 0x60
 8004f4e:	d877      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f50:	2b50      	cmp	r3, #80	; 0x50
 8004f52:	d03c      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0xfa>
 8004f54:	2b50      	cmp	r3, #80	; 0x50
 8004f56:	d873      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f58:	2b40      	cmp	r3, #64	; 0x40
 8004f5a:	d058      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x13a>
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d86f      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f60:	2b30      	cmp	r3, #48	; 0x30
 8004f62:	d064      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x15a>
 8004f64:	2b30      	cmp	r3, #48	; 0x30
 8004f66:	d86b      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d060      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x15a>
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	d867      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d05c      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x15a>
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d05a      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f78:	e062      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6899      	ldr	r1, [r3, #8]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f000 fc7b 	bl	8005884 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	609a      	str	r2, [r3, #8]
      break;
 8004fa6:	e04e      	b.n	8005046 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	6899      	ldr	r1, [r3, #8]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f000 fc64 	bl	8005884 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fca:	609a      	str	r2, [r3, #8]
      break;
 8004fcc:	e03b      	b.n	8005046 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6859      	ldr	r1, [r3, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f000 fbd8 	bl	8005790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2150      	movs	r1, #80	; 0x50
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fc31 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 8004fec:	e02b      	b.n	8005046 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f000 fbf7 	bl	80057ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2160      	movs	r1, #96	; 0x60
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fc21 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 800500c:	e01b      	b.n	8005046 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6859      	ldr	r1, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	461a      	mov	r2, r3
 800501c:	f000 fbb8 	bl	8005790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2140      	movs	r1, #64	; 0x40
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fc11 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 800502c:	e00b      	b.n	8005046 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4619      	mov	r1, r3
 8005038:	4610      	mov	r0, r2
 800503a:	f000 fc08 	bl	800584e <TIM_ITRx_SetConfig>
        break;
 800503e:	e002      	b.n	8005046 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005040:	bf00      	nop
 8005042:	e000      	b.n	8005046 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005044:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a40      	ldr	r2, [pc, #256]	; (80051c4 <TIM_Base_SetConfig+0x114>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d013      	beq.n	80050f0 <TIM_Base_SetConfig+0x40>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ce:	d00f      	beq.n	80050f0 <TIM_Base_SetConfig+0x40>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a3d      	ldr	r2, [pc, #244]	; (80051c8 <TIM_Base_SetConfig+0x118>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00b      	beq.n	80050f0 <TIM_Base_SetConfig+0x40>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a3c      	ldr	r2, [pc, #240]	; (80051cc <TIM_Base_SetConfig+0x11c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d007      	beq.n	80050f0 <TIM_Base_SetConfig+0x40>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a3b      	ldr	r2, [pc, #236]	; (80051d0 <TIM_Base_SetConfig+0x120>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d003      	beq.n	80050f0 <TIM_Base_SetConfig+0x40>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a3a      	ldr	r2, [pc, #232]	; (80051d4 <TIM_Base_SetConfig+0x124>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d108      	bne.n	8005102 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a2f      	ldr	r2, [pc, #188]	; (80051c4 <TIM_Base_SetConfig+0x114>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d01f      	beq.n	800514a <TIM_Base_SetConfig+0x9a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005110:	d01b      	beq.n	800514a <TIM_Base_SetConfig+0x9a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a2c      	ldr	r2, [pc, #176]	; (80051c8 <TIM_Base_SetConfig+0x118>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d017      	beq.n	800514a <TIM_Base_SetConfig+0x9a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a2b      	ldr	r2, [pc, #172]	; (80051cc <TIM_Base_SetConfig+0x11c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d013      	beq.n	800514a <TIM_Base_SetConfig+0x9a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a2a      	ldr	r2, [pc, #168]	; (80051d0 <TIM_Base_SetConfig+0x120>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00f      	beq.n	800514a <TIM_Base_SetConfig+0x9a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a29      	ldr	r2, [pc, #164]	; (80051d4 <TIM_Base_SetConfig+0x124>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00b      	beq.n	800514a <TIM_Base_SetConfig+0x9a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a28      	ldr	r2, [pc, #160]	; (80051d8 <TIM_Base_SetConfig+0x128>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d007      	beq.n	800514a <TIM_Base_SetConfig+0x9a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a27      	ldr	r2, [pc, #156]	; (80051dc <TIM_Base_SetConfig+0x12c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d003      	beq.n	800514a <TIM_Base_SetConfig+0x9a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a26      	ldr	r2, [pc, #152]	; (80051e0 <TIM_Base_SetConfig+0x130>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d108      	bne.n	800515c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <TIM_Base_SetConfig+0x114>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00f      	beq.n	80051a8 <TIM_Base_SetConfig+0xf8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a12      	ldr	r2, [pc, #72]	; (80051d4 <TIM_Base_SetConfig+0x124>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00b      	beq.n	80051a8 <TIM_Base_SetConfig+0xf8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a11      	ldr	r2, [pc, #68]	; (80051d8 <TIM_Base_SetConfig+0x128>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d007      	beq.n	80051a8 <TIM_Base_SetConfig+0xf8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a10      	ldr	r2, [pc, #64]	; (80051dc <TIM_Base_SetConfig+0x12c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d003      	beq.n	80051a8 <TIM_Base_SetConfig+0xf8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a0f      	ldr	r2, [pc, #60]	; (80051e0 <TIM_Base_SetConfig+0x130>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d103      	bne.n	80051b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	615a      	str	r2, [r3, #20]
}
 80051b6:	bf00      	nop
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40012c00 	.word	0x40012c00
 80051c8:	40000400 	.word	0x40000400
 80051cc:	40000800 	.word	0x40000800
 80051d0:	40000c00 	.word	0x40000c00
 80051d4:	40013400 	.word	0x40013400
 80051d8:	40014000 	.word	0x40014000
 80051dc:	40014400 	.word	0x40014400
 80051e0:	40014800 	.word	0x40014800

080051e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f023 0201 	bic.w	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0303 	bic.w	r3, r3, #3
 800521e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f023 0302 	bic.w	r3, r3, #2
 8005230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a2c      	ldr	r2, [pc, #176]	; (80052f0 <TIM_OC1_SetConfig+0x10c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00f      	beq.n	8005264 <TIM_OC1_SetConfig+0x80>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a2b      	ldr	r2, [pc, #172]	; (80052f4 <TIM_OC1_SetConfig+0x110>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00b      	beq.n	8005264 <TIM_OC1_SetConfig+0x80>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a2a      	ldr	r2, [pc, #168]	; (80052f8 <TIM_OC1_SetConfig+0x114>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d007      	beq.n	8005264 <TIM_OC1_SetConfig+0x80>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a29      	ldr	r2, [pc, #164]	; (80052fc <TIM_OC1_SetConfig+0x118>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_OC1_SetConfig+0x80>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a28      	ldr	r2, [pc, #160]	; (8005300 <TIM_OC1_SetConfig+0x11c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d10c      	bne.n	800527e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f023 0308 	bic.w	r3, r3, #8
 800526a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f023 0304 	bic.w	r3, r3, #4
 800527c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a1b      	ldr	r2, [pc, #108]	; (80052f0 <TIM_OC1_SetConfig+0x10c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00f      	beq.n	80052a6 <TIM_OC1_SetConfig+0xc2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a1a      	ldr	r2, [pc, #104]	; (80052f4 <TIM_OC1_SetConfig+0x110>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00b      	beq.n	80052a6 <TIM_OC1_SetConfig+0xc2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a19      	ldr	r2, [pc, #100]	; (80052f8 <TIM_OC1_SetConfig+0x114>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d007      	beq.n	80052a6 <TIM_OC1_SetConfig+0xc2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a18      	ldr	r2, [pc, #96]	; (80052fc <TIM_OC1_SetConfig+0x118>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d003      	beq.n	80052a6 <TIM_OC1_SetConfig+0xc2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a17      	ldr	r2, [pc, #92]	; (8005300 <TIM_OC1_SetConfig+0x11c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d111      	bne.n	80052ca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	621a      	str	r2, [r3, #32]
}
 80052e4:	bf00      	nop
 80052e6:	371c      	adds	r7, #28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	40012c00 	.word	0x40012c00
 80052f4:	40013400 	.word	0x40013400
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40014400 	.word	0x40014400
 8005300:	40014800 	.word	0x40014800

08005304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f023 0210 	bic.w	r2, r3, #16
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800533e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	021b      	lsls	r3, r3, #8
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f023 0320 	bic.w	r3, r3, #32
 8005352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a28      	ldr	r2, [pc, #160]	; (8005404 <TIM_OC2_SetConfig+0x100>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d003      	beq.n	8005370 <TIM_OC2_SetConfig+0x6c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a27      	ldr	r2, [pc, #156]	; (8005408 <TIM_OC2_SetConfig+0x104>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d10d      	bne.n	800538c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800538a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a1d      	ldr	r2, [pc, #116]	; (8005404 <TIM_OC2_SetConfig+0x100>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00f      	beq.n	80053b4 <TIM_OC2_SetConfig+0xb0>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <TIM_OC2_SetConfig+0x104>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00b      	beq.n	80053b4 <TIM_OC2_SetConfig+0xb0>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a1b      	ldr	r2, [pc, #108]	; (800540c <TIM_OC2_SetConfig+0x108>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d007      	beq.n	80053b4 <TIM_OC2_SetConfig+0xb0>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a1a      	ldr	r2, [pc, #104]	; (8005410 <TIM_OC2_SetConfig+0x10c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <TIM_OC2_SetConfig+0xb0>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a19      	ldr	r2, [pc, #100]	; (8005414 <TIM_OC2_SetConfig+0x110>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d113      	bne.n	80053dc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40013400 	.word	0x40013400
 800540c:	40014000 	.word	0x40014000
 8005410:	40014400 	.word	0x40014400
 8005414:	40014800 	.word	0x40014800

08005418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 0303 	bic.w	r3, r3, #3
 8005452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	021b      	lsls	r3, r3, #8
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a27      	ldr	r2, [pc, #156]	; (8005514 <TIM_OC3_SetConfig+0xfc>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d003      	beq.n	8005482 <TIM_OC3_SetConfig+0x6a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a26      	ldr	r2, [pc, #152]	; (8005518 <TIM_OC3_SetConfig+0x100>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d10d      	bne.n	800549e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005488:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	021b      	lsls	r3, r3, #8
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800549c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a1c      	ldr	r2, [pc, #112]	; (8005514 <TIM_OC3_SetConfig+0xfc>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00f      	beq.n	80054c6 <TIM_OC3_SetConfig+0xae>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a1b      	ldr	r2, [pc, #108]	; (8005518 <TIM_OC3_SetConfig+0x100>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00b      	beq.n	80054c6 <TIM_OC3_SetConfig+0xae>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a1a      	ldr	r2, [pc, #104]	; (800551c <TIM_OC3_SetConfig+0x104>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d007      	beq.n	80054c6 <TIM_OC3_SetConfig+0xae>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a19      	ldr	r2, [pc, #100]	; (8005520 <TIM_OC3_SetConfig+0x108>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d003      	beq.n	80054c6 <TIM_OC3_SetConfig+0xae>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a18      	ldr	r2, [pc, #96]	; (8005524 <TIM_OC3_SetConfig+0x10c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d113      	bne.n	80054ee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	621a      	str	r2, [r3, #32]
}
 8005508:	bf00      	nop
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	40012c00 	.word	0x40012c00
 8005518:	40013400 	.word	0x40013400
 800551c:	40014000 	.word	0x40014000
 8005520:	40014400 	.word	0x40014400
 8005524:	40014800 	.word	0x40014800

08005528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	021b      	lsls	r3, r3, #8
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4313      	orrs	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	031b      	lsls	r3, r3, #12
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a18      	ldr	r2, [pc, #96]	; (80055e8 <TIM_OC4_SetConfig+0xc0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00f      	beq.n	80055ac <TIM_OC4_SetConfig+0x84>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a17      	ldr	r2, [pc, #92]	; (80055ec <TIM_OC4_SetConfig+0xc4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00b      	beq.n	80055ac <TIM_OC4_SetConfig+0x84>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a16      	ldr	r2, [pc, #88]	; (80055f0 <TIM_OC4_SetConfig+0xc8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d007      	beq.n	80055ac <TIM_OC4_SetConfig+0x84>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a15      	ldr	r2, [pc, #84]	; (80055f4 <TIM_OC4_SetConfig+0xcc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d003      	beq.n	80055ac <TIM_OC4_SetConfig+0x84>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a14      	ldr	r2, [pc, #80]	; (80055f8 <TIM_OC4_SetConfig+0xd0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d109      	bne.n	80055c0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	019b      	lsls	r3, r3, #6
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	621a      	str	r2, [r3, #32]
}
 80055da:	bf00      	nop
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40012c00 	.word	0x40012c00
 80055ec:	40013400 	.word	0x40013400
 80055f0:	40014000 	.word	0x40014000
 80055f4:	40014400 	.word	0x40014400
 80055f8:	40014800 	.word	0x40014800

080055fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800562a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005640:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	041b      	lsls	r3, r3, #16
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a17      	ldr	r2, [pc, #92]	; (80056b0 <TIM_OC5_SetConfig+0xb4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00f      	beq.n	8005676 <TIM_OC5_SetConfig+0x7a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a16      	ldr	r2, [pc, #88]	; (80056b4 <TIM_OC5_SetConfig+0xb8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00b      	beq.n	8005676 <TIM_OC5_SetConfig+0x7a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <TIM_OC5_SetConfig+0xbc>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d007      	beq.n	8005676 <TIM_OC5_SetConfig+0x7a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a14      	ldr	r2, [pc, #80]	; (80056bc <TIM_OC5_SetConfig+0xc0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d003      	beq.n	8005676 <TIM_OC5_SetConfig+0x7a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a13      	ldr	r2, [pc, #76]	; (80056c0 <TIM_OC5_SetConfig+0xc4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d109      	bne.n	800568a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800567c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	021b      	lsls	r3, r3, #8
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	621a      	str	r2, [r3, #32]
}
 80056a4:	bf00      	nop
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	40012c00 	.word	0x40012c00
 80056b4:	40013400 	.word	0x40013400
 80056b8:	40014000 	.word	0x40014000
 80056bc:	40014400 	.word	0x40014400
 80056c0:	40014800 	.word	0x40014800

080056c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	4313      	orrs	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800570a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	051b      	lsls	r3, r3, #20
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a18      	ldr	r2, [pc, #96]	; (800577c <TIM_OC6_SetConfig+0xb8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00f      	beq.n	8005740 <TIM_OC6_SetConfig+0x7c>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a17      	ldr	r2, [pc, #92]	; (8005780 <TIM_OC6_SetConfig+0xbc>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00b      	beq.n	8005740 <TIM_OC6_SetConfig+0x7c>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a16      	ldr	r2, [pc, #88]	; (8005784 <TIM_OC6_SetConfig+0xc0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d007      	beq.n	8005740 <TIM_OC6_SetConfig+0x7c>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a15      	ldr	r2, [pc, #84]	; (8005788 <TIM_OC6_SetConfig+0xc4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_OC6_SetConfig+0x7c>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a14      	ldr	r2, [pc, #80]	; (800578c <TIM_OC6_SetConfig+0xc8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d109      	bne.n	8005754 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005746:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	029b      	lsls	r3, r3, #10
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	40012c00 	.word	0x40012c00
 8005780:	40013400 	.word	0x40013400
 8005784:	40014000 	.word	0x40014000
 8005788:	40014400 	.word	0x40014400
 800578c:	40014800 	.word	0x40014800

08005790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	f023 0201 	bic.w	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f023 030a 	bic.w	r3, r3, #10
 80057cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	bf00      	nop
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b087      	sub	sp, #28
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f023 0210 	bic.w	r2, r3, #16
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005818:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	031b      	lsls	r3, r3, #12
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800582a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	f043 0307 	orr.w	r3, r3, #7
 8005870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	609a      	str	r2, [r3, #8]
}
 8005878:	bf00      	nop
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800589e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	021a      	lsls	r2, r3, #8
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	609a      	str	r2, [r3, #8]
}
 80058b8:	bf00      	nop
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058d8:	2302      	movs	r3, #2
 80058da:	e068      	b.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a2e      	ldr	r2, [pc, #184]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d004      	beq.n	8005910 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a2d      	ldr	r2, [pc, #180]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d108      	bne.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005916:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005928:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1e      	ldr	r2, [pc, #120]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d01d      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594e:	d018      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1b      	ldr	r2, [pc, #108]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d013      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1a      	ldr	r2, [pc, #104]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00e      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a18      	ldr	r2, [pc, #96]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d009      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a13      	ldr	r2, [pc, #76]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d004      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a14      	ldr	r2, [pc, #80]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d10c      	bne.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	4313      	orrs	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40012c00 	.word	0x40012c00
 80059c0:	40013400 	.word	0x40013400
 80059c4:	40000400 	.word	0x40000400
 80059c8:	40000800 	.word	0x40000800
 80059cc:	40000c00 	.word	0x40000c00
 80059d0:	40014000 	.word	0x40014000

080059d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e040      	b.n	8005aa4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fb fb80 	bl	8001138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2224      	movs	r2, #36	; 0x24
 8005a3c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0201 	bic.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f8c0 	bl	8005bd4 <UART_SetConfig>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d101      	bne.n	8005a5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e022      	b.n	8005aa4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fb3e 	bl	80060e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fbc5 	bl	800622c <UART_CheckIdleState>
 8005aa2:	4603      	mov	r3, r0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08a      	sub	sp, #40	; 0x28
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	f040 8082 	bne.w	8005bca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <HAL_UART_Transmit+0x26>
 8005acc:	88fb      	ldrh	r3, [r7, #6]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e07a      	b.n	8005bcc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_UART_Transmit+0x38>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e073      	b.n	8005bcc <HAL_UART_Transmit+0x120>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2221      	movs	r2, #33	; 0x21
 8005af8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005afa:	f7fb fca9 	bl	8001450 <HAL_GetTick>
 8005afe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	88fa      	ldrh	r2, [r7, #6]
 8005b0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b18:	d108      	bne.n	8005b2c <HAL_UART_Transmit+0x80>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d104      	bne.n	8005b2c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b22:	2300      	movs	r3, #0
 8005b24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	61bb      	str	r3, [r7, #24]
 8005b2a:	e003      	b.n	8005b34 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b3c:	e02d      	b.n	8005b9a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2200      	movs	r2, #0
 8005b46:	2180      	movs	r1, #128	; 0x80
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 fbb8 	bl	80062be <UART_WaitOnFlagUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e039      	b.n	8005bcc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10b      	bne.n	8005b76 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	881a      	ldrh	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b6a:	b292      	uxth	r2, r2
 8005b6c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	3302      	adds	r3, #2
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	e008      	b.n	8005b88 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	781a      	ldrb	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	b292      	uxth	r2, r2
 8005b80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	3301      	adds	r3, #1
 8005b86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1cb      	bne.n	8005b3e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2200      	movs	r2, #0
 8005bae:	2140      	movs	r1, #64	; 0x40
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 fb84 	bl	80062be <UART_WaitOnFlagUntilTimeout>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e005      	b.n	8005bcc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	e000      	b.n	8005bcc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005bca:	2302      	movs	r3, #2
  }
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bd4:	b5b0      	push	{r4, r5, r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	4bad      	ldr	r3, [pc, #692]	; (8005eb4 <UART_SetConfig+0x2e0>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6812      	ldr	r2, [r2, #0]
 8005c06:	69f9      	ldr	r1, [r7, #28]
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4aa2      	ldr	r2, [pc, #648]	; (8005eb8 <UART_SetConfig+0x2e4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d004      	beq.n	8005c3c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a99      	ldr	r2, [pc, #612]	; (8005ebc <UART_SetConfig+0x2e8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d121      	bne.n	8005c9e <UART_SetConfig+0xca>
 8005c5a:	4b99      	ldr	r3, [pc, #612]	; (8005ec0 <UART_SetConfig+0x2ec>)
 8005c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c60:	f003 0303 	and.w	r3, r3, #3
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d817      	bhi.n	8005c98 <UART_SetConfig+0xc4>
 8005c68:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <UART_SetConfig+0x9c>)
 8005c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6e:	bf00      	nop
 8005c70:	08005c81 	.word	0x08005c81
 8005c74:	08005c8d 	.word	0x08005c8d
 8005c78:	08005c87 	.word	0x08005c87
 8005c7c:	08005c93 	.word	0x08005c93
 8005c80:	2301      	movs	r3, #1
 8005c82:	76fb      	strb	r3, [r7, #27]
 8005c84:	e0e7      	b.n	8005e56 <UART_SetConfig+0x282>
 8005c86:	2302      	movs	r3, #2
 8005c88:	76fb      	strb	r3, [r7, #27]
 8005c8a:	e0e4      	b.n	8005e56 <UART_SetConfig+0x282>
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	76fb      	strb	r3, [r7, #27]
 8005c90:	e0e1      	b.n	8005e56 <UART_SetConfig+0x282>
 8005c92:	2308      	movs	r3, #8
 8005c94:	76fb      	strb	r3, [r7, #27]
 8005c96:	e0de      	b.n	8005e56 <UART_SetConfig+0x282>
 8005c98:	2310      	movs	r3, #16
 8005c9a:	76fb      	strb	r3, [r7, #27]
 8005c9c:	e0db      	b.n	8005e56 <UART_SetConfig+0x282>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a88      	ldr	r2, [pc, #544]	; (8005ec4 <UART_SetConfig+0x2f0>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d132      	bne.n	8005d0e <UART_SetConfig+0x13a>
 8005ca8:	4b85      	ldr	r3, [pc, #532]	; (8005ec0 <UART_SetConfig+0x2ec>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cae:	f003 030c 	and.w	r3, r3, #12
 8005cb2:	2b0c      	cmp	r3, #12
 8005cb4:	d828      	bhi.n	8005d08 <UART_SetConfig+0x134>
 8005cb6:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <UART_SetConfig+0xe8>)
 8005cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbc:	08005cf1 	.word	0x08005cf1
 8005cc0:	08005d09 	.word	0x08005d09
 8005cc4:	08005d09 	.word	0x08005d09
 8005cc8:	08005d09 	.word	0x08005d09
 8005ccc:	08005cfd 	.word	0x08005cfd
 8005cd0:	08005d09 	.word	0x08005d09
 8005cd4:	08005d09 	.word	0x08005d09
 8005cd8:	08005d09 	.word	0x08005d09
 8005cdc:	08005cf7 	.word	0x08005cf7
 8005ce0:	08005d09 	.word	0x08005d09
 8005ce4:	08005d09 	.word	0x08005d09
 8005ce8:	08005d09 	.word	0x08005d09
 8005cec:	08005d03 	.word	0x08005d03
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	76fb      	strb	r3, [r7, #27]
 8005cf4:	e0af      	b.n	8005e56 <UART_SetConfig+0x282>
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	76fb      	strb	r3, [r7, #27]
 8005cfa:	e0ac      	b.n	8005e56 <UART_SetConfig+0x282>
 8005cfc:	2304      	movs	r3, #4
 8005cfe:	76fb      	strb	r3, [r7, #27]
 8005d00:	e0a9      	b.n	8005e56 <UART_SetConfig+0x282>
 8005d02:	2308      	movs	r3, #8
 8005d04:	76fb      	strb	r3, [r7, #27]
 8005d06:	e0a6      	b.n	8005e56 <UART_SetConfig+0x282>
 8005d08:	2310      	movs	r3, #16
 8005d0a:	76fb      	strb	r3, [r7, #27]
 8005d0c:	e0a3      	b.n	8005e56 <UART_SetConfig+0x282>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a6d      	ldr	r2, [pc, #436]	; (8005ec8 <UART_SetConfig+0x2f4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d120      	bne.n	8005d5a <UART_SetConfig+0x186>
 8005d18:	4b69      	ldr	r3, [pc, #420]	; (8005ec0 <UART_SetConfig+0x2ec>)
 8005d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d22:	2b30      	cmp	r3, #48	; 0x30
 8005d24:	d013      	beq.n	8005d4e <UART_SetConfig+0x17a>
 8005d26:	2b30      	cmp	r3, #48	; 0x30
 8005d28:	d814      	bhi.n	8005d54 <UART_SetConfig+0x180>
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	d009      	beq.n	8005d42 <UART_SetConfig+0x16e>
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d810      	bhi.n	8005d54 <UART_SetConfig+0x180>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <UART_SetConfig+0x168>
 8005d36:	2b10      	cmp	r3, #16
 8005d38:	d006      	beq.n	8005d48 <UART_SetConfig+0x174>
 8005d3a:	e00b      	b.n	8005d54 <UART_SetConfig+0x180>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	76fb      	strb	r3, [r7, #27]
 8005d40:	e089      	b.n	8005e56 <UART_SetConfig+0x282>
 8005d42:	2302      	movs	r3, #2
 8005d44:	76fb      	strb	r3, [r7, #27]
 8005d46:	e086      	b.n	8005e56 <UART_SetConfig+0x282>
 8005d48:	2304      	movs	r3, #4
 8005d4a:	76fb      	strb	r3, [r7, #27]
 8005d4c:	e083      	b.n	8005e56 <UART_SetConfig+0x282>
 8005d4e:	2308      	movs	r3, #8
 8005d50:	76fb      	strb	r3, [r7, #27]
 8005d52:	e080      	b.n	8005e56 <UART_SetConfig+0x282>
 8005d54:	2310      	movs	r3, #16
 8005d56:	76fb      	strb	r3, [r7, #27]
 8005d58:	e07d      	b.n	8005e56 <UART_SetConfig+0x282>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a5b      	ldr	r2, [pc, #364]	; (8005ecc <UART_SetConfig+0x2f8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d120      	bne.n	8005da6 <UART_SetConfig+0x1d2>
 8005d64:	4b56      	ldr	r3, [pc, #344]	; (8005ec0 <UART_SetConfig+0x2ec>)
 8005d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d6e:	2bc0      	cmp	r3, #192	; 0xc0
 8005d70:	d013      	beq.n	8005d9a <UART_SetConfig+0x1c6>
 8005d72:	2bc0      	cmp	r3, #192	; 0xc0
 8005d74:	d814      	bhi.n	8005da0 <UART_SetConfig+0x1cc>
 8005d76:	2b80      	cmp	r3, #128	; 0x80
 8005d78:	d009      	beq.n	8005d8e <UART_SetConfig+0x1ba>
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d810      	bhi.n	8005da0 <UART_SetConfig+0x1cc>
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <UART_SetConfig+0x1b4>
 8005d82:	2b40      	cmp	r3, #64	; 0x40
 8005d84:	d006      	beq.n	8005d94 <UART_SetConfig+0x1c0>
 8005d86:	e00b      	b.n	8005da0 <UART_SetConfig+0x1cc>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	76fb      	strb	r3, [r7, #27]
 8005d8c:	e063      	b.n	8005e56 <UART_SetConfig+0x282>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	76fb      	strb	r3, [r7, #27]
 8005d92:	e060      	b.n	8005e56 <UART_SetConfig+0x282>
 8005d94:	2304      	movs	r3, #4
 8005d96:	76fb      	strb	r3, [r7, #27]
 8005d98:	e05d      	b.n	8005e56 <UART_SetConfig+0x282>
 8005d9a:	2308      	movs	r3, #8
 8005d9c:	76fb      	strb	r3, [r7, #27]
 8005d9e:	e05a      	b.n	8005e56 <UART_SetConfig+0x282>
 8005da0:	2310      	movs	r3, #16
 8005da2:	76fb      	strb	r3, [r7, #27]
 8005da4:	e057      	b.n	8005e56 <UART_SetConfig+0x282>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a49      	ldr	r2, [pc, #292]	; (8005ed0 <UART_SetConfig+0x2fc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d125      	bne.n	8005dfc <UART_SetConfig+0x228>
 8005db0:	4b43      	ldr	r3, [pc, #268]	; (8005ec0 <UART_SetConfig+0x2ec>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dbe:	d017      	beq.n	8005df0 <UART_SetConfig+0x21c>
 8005dc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc4:	d817      	bhi.n	8005df6 <UART_SetConfig+0x222>
 8005dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dca:	d00b      	beq.n	8005de4 <UART_SetConfig+0x210>
 8005dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd0:	d811      	bhi.n	8005df6 <UART_SetConfig+0x222>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <UART_SetConfig+0x20a>
 8005dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dda:	d006      	beq.n	8005dea <UART_SetConfig+0x216>
 8005ddc:	e00b      	b.n	8005df6 <UART_SetConfig+0x222>
 8005dde:	2300      	movs	r3, #0
 8005de0:	76fb      	strb	r3, [r7, #27]
 8005de2:	e038      	b.n	8005e56 <UART_SetConfig+0x282>
 8005de4:	2302      	movs	r3, #2
 8005de6:	76fb      	strb	r3, [r7, #27]
 8005de8:	e035      	b.n	8005e56 <UART_SetConfig+0x282>
 8005dea:	2304      	movs	r3, #4
 8005dec:	76fb      	strb	r3, [r7, #27]
 8005dee:	e032      	b.n	8005e56 <UART_SetConfig+0x282>
 8005df0:	2308      	movs	r3, #8
 8005df2:	76fb      	strb	r3, [r7, #27]
 8005df4:	e02f      	b.n	8005e56 <UART_SetConfig+0x282>
 8005df6:	2310      	movs	r3, #16
 8005df8:	76fb      	strb	r3, [r7, #27]
 8005dfa:	e02c      	b.n	8005e56 <UART_SetConfig+0x282>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a2d      	ldr	r2, [pc, #180]	; (8005eb8 <UART_SetConfig+0x2e4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d125      	bne.n	8005e52 <UART_SetConfig+0x27e>
 8005e06:	4b2e      	ldr	r3, [pc, #184]	; (8005ec0 <UART_SetConfig+0x2ec>)
 8005e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e14:	d017      	beq.n	8005e46 <UART_SetConfig+0x272>
 8005e16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e1a:	d817      	bhi.n	8005e4c <UART_SetConfig+0x278>
 8005e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e20:	d00b      	beq.n	8005e3a <UART_SetConfig+0x266>
 8005e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e26:	d811      	bhi.n	8005e4c <UART_SetConfig+0x278>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <UART_SetConfig+0x260>
 8005e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e30:	d006      	beq.n	8005e40 <UART_SetConfig+0x26c>
 8005e32:	e00b      	b.n	8005e4c <UART_SetConfig+0x278>
 8005e34:	2300      	movs	r3, #0
 8005e36:	76fb      	strb	r3, [r7, #27]
 8005e38:	e00d      	b.n	8005e56 <UART_SetConfig+0x282>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	76fb      	strb	r3, [r7, #27]
 8005e3e:	e00a      	b.n	8005e56 <UART_SetConfig+0x282>
 8005e40:	2304      	movs	r3, #4
 8005e42:	76fb      	strb	r3, [r7, #27]
 8005e44:	e007      	b.n	8005e56 <UART_SetConfig+0x282>
 8005e46:	2308      	movs	r3, #8
 8005e48:	76fb      	strb	r3, [r7, #27]
 8005e4a:	e004      	b.n	8005e56 <UART_SetConfig+0x282>
 8005e4c:	2310      	movs	r3, #16
 8005e4e:	76fb      	strb	r3, [r7, #27]
 8005e50:	e001      	b.n	8005e56 <UART_SetConfig+0x282>
 8005e52:	2310      	movs	r3, #16
 8005e54:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a17      	ldr	r2, [pc, #92]	; (8005eb8 <UART_SetConfig+0x2e4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	f040 8087 	bne.w	8005f70 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e62:	7efb      	ldrb	r3, [r7, #27]
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d837      	bhi.n	8005ed8 <UART_SetConfig+0x304>
 8005e68:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <UART_SetConfig+0x29c>)
 8005e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6e:	bf00      	nop
 8005e70:	08005e95 	.word	0x08005e95
 8005e74:	08005ed9 	.word	0x08005ed9
 8005e78:	08005e9d 	.word	0x08005e9d
 8005e7c:	08005ed9 	.word	0x08005ed9
 8005e80:	08005ea3 	.word	0x08005ea3
 8005e84:	08005ed9 	.word	0x08005ed9
 8005e88:	08005ed9 	.word	0x08005ed9
 8005e8c:	08005ed9 	.word	0x08005ed9
 8005e90:	08005eab 	.word	0x08005eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e94:	f7fd ff88 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8005e98:	6178      	str	r0, [r7, #20]
        break;
 8005e9a:	e022      	b.n	8005ee2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e9c:	4b0d      	ldr	r3, [pc, #52]	; (8005ed4 <UART_SetConfig+0x300>)
 8005e9e:	617b      	str	r3, [r7, #20]
        break;
 8005ea0:	e01f      	b.n	8005ee2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ea2:	f7fd fee9 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8005ea6:	6178      	str	r0, [r7, #20]
        break;
 8005ea8:	e01b      	b.n	8005ee2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eae:	617b      	str	r3, [r7, #20]
        break;
 8005eb0:	e017      	b.n	8005ee2 <UART_SetConfig+0x30e>
 8005eb2:	bf00      	nop
 8005eb4:	efff69f3 	.word	0xefff69f3
 8005eb8:	40008000 	.word	0x40008000
 8005ebc:	40013800 	.word	0x40013800
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	40004400 	.word	0x40004400
 8005ec8:	40004800 	.word	0x40004800
 8005ecc:	40004c00 	.word	0x40004c00
 8005ed0:	40005000 	.word	0x40005000
 8005ed4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	76bb      	strb	r3, [r7, #26]
        break;
 8005ee0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80f1 	beq.w	80060cc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	4413      	add	r3, r2
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d305      	bcc.n	8005f06 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d902      	bls.n	8005f0c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	76bb      	strb	r3, [r7, #26]
 8005f0a:	e0df      	b.n	80060cc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f04f 0100 	mov.w	r1, #0
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	020b      	lsls	r3, r1, #8
 8005f1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f22:	0202      	lsls	r2, r0, #8
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	6849      	ldr	r1, [r1, #4]
 8005f28:	0849      	lsrs	r1, r1, #1
 8005f2a:	4608      	mov	r0, r1
 8005f2c:	f04f 0100 	mov.w	r1, #0
 8005f30:	1814      	adds	r4, r2, r0
 8005f32:	eb43 0501 	adc.w	r5, r3, r1
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	4620      	mov	r0, r4
 8005f42:	4629      	mov	r1, r5
 8005f44:	f7fa f99c 	bl	8000280 <__aeabi_uldivmod>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f56:	d308      	bcc.n	8005f6a <UART_SetConfig+0x396>
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f5e:	d204      	bcs.n	8005f6a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	60da      	str	r2, [r3, #12]
 8005f68:	e0b0      	b.n	80060cc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	76bb      	strb	r3, [r7, #26]
 8005f6e:	e0ad      	b.n	80060cc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f78:	d15c      	bne.n	8006034 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005f7a:	7efb      	ldrb	r3, [r7, #27]
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d828      	bhi.n	8005fd2 <UART_SetConfig+0x3fe>
 8005f80:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <UART_SetConfig+0x3b4>)
 8005f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f86:	bf00      	nop
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	08005fb5 	.word	0x08005fb5
 8005f90:	08005fbd 	.word	0x08005fbd
 8005f94:	08005fd3 	.word	0x08005fd3
 8005f98:	08005fc3 	.word	0x08005fc3
 8005f9c:	08005fd3 	.word	0x08005fd3
 8005fa0:	08005fd3 	.word	0x08005fd3
 8005fa4:	08005fd3 	.word	0x08005fd3
 8005fa8:	08005fcb 	.word	0x08005fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fac:	f7fd fefc 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8005fb0:	6178      	str	r0, [r7, #20]
        break;
 8005fb2:	e013      	b.n	8005fdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fb4:	f7fd ff0e 	bl	8003dd4 <HAL_RCC_GetPCLK2Freq>
 8005fb8:	6178      	str	r0, [r7, #20]
        break;
 8005fba:	e00f      	b.n	8005fdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fbc:	4b49      	ldr	r3, [pc, #292]	; (80060e4 <UART_SetConfig+0x510>)
 8005fbe:	617b      	str	r3, [r7, #20]
        break;
 8005fc0:	e00c      	b.n	8005fdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fc2:	f7fd fe59 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8005fc6:	6178      	str	r0, [r7, #20]
        break;
 8005fc8:	e008      	b.n	8005fdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fce:	617b      	str	r3, [r7, #20]
        break;
 8005fd0:	e004      	b.n	8005fdc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	76bb      	strb	r3, [r7, #26]
        break;
 8005fda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d074      	beq.n	80060cc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	005a      	lsls	r2, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	085b      	lsrs	r3, r3, #1
 8005fec:	441a      	add	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	2b0f      	cmp	r3, #15
 8005ffe:	d916      	bls.n	800602e <UART_SetConfig+0x45a>
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006006:	d212      	bcs.n	800602e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	b29b      	uxth	r3, r3
 800600c:	f023 030f 	bic.w	r3, r3, #15
 8006010:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	085b      	lsrs	r3, r3, #1
 8006016:	b29b      	uxth	r3, r3
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	b29a      	uxth	r2, r3
 800601e:	89fb      	ldrh	r3, [r7, #14]
 8006020:	4313      	orrs	r3, r2
 8006022:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	89fa      	ldrh	r2, [r7, #14]
 800602a:	60da      	str	r2, [r3, #12]
 800602c:	e04e      	b.n	80060cc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	76bb      	strb	r3, [r7, #26]
 8006032:	e04b      	b.n	80060cc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006034:	7efb      	ldrb	r3, [r7, #27]
 8006036:	2b08      	cmp	r3, #8
 8006038:	d827      	bhi.n	800608a <UART_SetConfig+0x4b6>
 800603a:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <UART_SetConfig+0x46c>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	08006065 	.word	0x08006065
 8006044:	0800606d 	.word	0x0800606d
 8006048:	08006075 	.word	0x08006075
 800604c:	0800608b 	.word	0x0800608b
 8006050:	0800607b 	.word	0x0800607b
 8006054:	0800608b 	.word	0x0800608b
 8006058:	0800608b 	.word	0x0800608b
 800605c:	0800608b 	.word	0x0800608b
 8006060:	08006083 	.word	0x08006083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006064:	f7fd fea0 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8006068:	6178      	str	r0, [r7, #20]
        break;
 800606a:	e013      	b.n	8006094 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800606c:	f7fd feb2 	bl	8003dd4 <HAL_RCC_GetPCLK2Freq>
 8006070:	6178      	str	r0, [r7, #20]
        break;
 8006072:	e00f      	b.n	8006094 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006074:	4b1b      	ldr	r3, [pc, #108]	; (80060e4 <UART_SetConfig+0x510>)
 8006076:	617b      	str	r3, [r7, #20]
        break;
 8006078:	e00c      	b.n	8006094 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800607a:	f7fd fdfd 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 800607e:	6178      	str	r0, [r7, #20]
        break;
 8006080:	e008      	b.n	8006094 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006086:	617b      	str	r3, [r7, #20]
        break;
 8006088:	e004      	b.n	8006094 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	76bb      	strb	r3, [r7, #26]
        break;
 8006092:	bf00      	nop
    }

    if (pclk != 0U)
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d018      	beq.n	80060cc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	085a      	lsrs	r2, r3, #1
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	441a      	add	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	2b0f      	cmp	r3, #15
 80060b4:	d908      	bls.n	80060c8 <UART_SetConfig+0x4f4>
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060bc:	d204      	bcs.n	80060c8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	60da      	str	r2, [r3, #12]
 80060c6:	e001      	b.n	80060cc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80060d8:	7ebb      	ldrb	r3, [r7, #26]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3720      	adds	r7, #32
 80060de:	46bd      	mov	sp, r7
 80060e0:	bdb0      	pop	{r4, r5, r7, pc}
 80060e2:	bf00      	nop
 80060e4:	00f42400 	.word	0x00f42400

080060e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00a      	beq.n	8006156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	f003 0310 	and.w	r3, r3, #16
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00a      	beq.n	800619a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01a      	beq.n	80061fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061e6:	d10a      	bne.n	80061fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	605a      	str	r2, [r3, #4]
  }
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af02      	add	r7, sp, #8
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800623c:	f7fb f908 	bl	8001450 <HAL_GetTick>
 8006240:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b08      	cmp	r3, #8
 800624e:	d10e      	bne.n	800626e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f82d 	bl	80062be <UART_WaitOnFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e023      	b.n	80062b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b04      	cmp	r3, #4
 800627a:	d10e      	bne.n	800629a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800627c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f817 	bl	80062be <UART_WaitOnFlagUntilTimeout>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e00d      	b.n	80062b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2220      	movs	r2, #32
 800629e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	60b9      	str	r1, [r7, #8]
 80062c8:	603b      	str	r3, [r7, #0]
 80062ca:	4613      	mov	r3, r2
 80062cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ce:	e05e      	b.n	800638e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d6:	d05a      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d8:	f7fb f8ba 	bl	8001450 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d302      	bcc.n	80062ee <UART_WaitOnFlagUntilTimeout+0x30>
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d11b      	bne.n	8006326 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062fc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0201 	bic.w	r2, r2, #1
 800630c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e043      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d02c      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800633e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006342:	d124      	bne.n	800638e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800634c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800635c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0201 	bic.w	r2, r2, #1
 800636c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2220      	movs	r2, #32
 8006372:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2220      	movs	r2, #32
 8006378:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2220      	movs	r2, #32
 800637e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e00f      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69da      	ldr	r2, [r3, #28]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4013      	ands	r3, r2
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	429a      	cmp	r2, r3
 800639c:	bf0c      	ite	eq
 800639e:	2301      	moveq	r3, #1
 80063a0:	2300      	movne	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d091      	beq.n	80062d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <__errno>:
 80063b8:	4b01      	ldr	r3, [pc, #4]	; (80063c0 <__errno+0x8>)
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	20000024 	.word	0x20000024

080063c4 <__libc_init_array>:
 80063c4:	b570      	push	{r4, r5, r6, lr}
 80063c6:	4d0d      	ldr	r5, [pc, #52]	; (80063fc <__libc_init_array+0x38>)
 80063c8:	4c0d      	ldr	r4, [pc, #52]	; (8006400 <__libc_init_array+0x3c>)
 80063ca:	1b64      	subs	r4, r4, r5
 80063cc:	10a4      	asrs	r4, r4, #2
 80063ce:	2600      	movs	r6, #0
 80063d0:	42a6      	cmp	r6, r4
 80063d2:	d109      	bne.n	80063e8 <__libc_init_array+0x24>
 80063d4:	4d0b      	ldr	r5, [pc, #44]	; (8006404 <__libc_init_array+0x40>)
 80063d6:	4c0c      	ldr	r4, [pc, #48]	; (8006408 <__libc_init_array+0x44>)
 80063d8:	f000 fc4e 	bl	8006c78 <_init>
 80063dc:	1b64      	subs	r4, r4, r5
 80063de:	10a4      	asrs	r4, r4, #2
 80063e0:	2600      	movs	r6, #0
 80063e2:	42a6      	cmp	r6, r4
 80063e4:	d105      	bne.n	80063f2 <__libc_init_array+0x2e>
 80063e6:	bd70      	pop	{r4, r5, r6, pc}
 80063e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ec:	4798      	blx	r3
 80063ee:	3601      	adds	r6, #1
 80063f0:	e7ee      	b.n	80063d0 <__libc_init_array+0xc>
 80063f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f6:	4798      	blx	r3
 80063f8:	3601      	adds	r6, #1
 80063fa:	e7f2      	b.n	80063e2 <__libc_init_array+0x1e>
 80063fc:	08006d60 	.word	0x08006d60
 8006400:	08006d60 	.word	0x08006d60
 8006404:	08006d60 	.word	0x08006d60
 8006408:	08006d64 	.word	0x08006d64

0800640c <memset>:
 800640c:	4402      	add	r2, r0
 800640e:	4603      	mov	r3, r0
 8006410:	4293      	cmp	r3, r2
 8006412:	d100      	bne.n	8006416 <memset+0xa>
 8006414:	4770      	bx	lr
 8006416:	f803 1b01 	strb.w	r1, [r3], #1
 800641a:	e7f9      	b.n	8006410 <memset+0x4>

0800641c <siprintf>:
 800641c:	b40e      	push	{r1, r2, r3}
 800641e:	b500      	push	{lr}
 8006420:	b09c      	sub	sp, #112	; 0x70
 8006422:	ab1d      	add	r3, sp, #116	; 0x74
 8006424:	9002      	str	r0, [sp, #8]
 8006426:	9006      	str	r0, [sp, #24]
 8006428:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800642c:	4809      	ldr	r0, [pc, #36]	; (8006454 <siprintf+0x38>)
 800642e:	9107      	str	r1, [sp, #28]
 8006430:	9104      	str	r1, [sp, #16]
 8006432:	4909      	ldr	r1, [pc, #36]	; (8006458 <siprintf+0x3c>)
 8006434:	f853 2b04 	ldr.w	r2, [r3], #4
 8006438:	9105      	str	r1, [sp, #20]
 800643a:	6800      	ldr	r0, [r0, #0]
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	a902      	add	r1, sp, #8
 8006440:	f000 f868 	bl	8006514 <_svfiprintf_r>
 8006444:	9b02      	ldr	r3, [sp, #8]
 8006446:	2200      	movs	r2, #0
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	b01c      	add	sp, #112	; 0x70
 800644c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006450:	b003      	add	sp, #12
 8006452:	4770      	bx	lr
 8006454:	20000024 	.word	0x20000024
 8006458:	ffff0208 	.word	0xffff0208

0800645c <__ssputs_r>:
 800645c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006460:	688e      	ldr	r6, [r1, #8]
 8006462:	429e      	cmp	r6, r3
 8006464:	4682      	mov	sl, r0
 8006466:	460c      	mov	r4, r1
 8006468:	4690      	mov	r8, r2
 800646a:	461f      	mov	r7, r3
 800646c:	d838      	bhi.n	80064e0 <__ssputs_r+0x84>
 800646e:	898a      	ldrh	r2, [r1, #12]
 8006470:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006474:	d032      	beq.n	80064dc <__ssputs_r+0x80>
 8006476:	6825      	ldr	r5, [r4, #0]
 8006478:	6909      	ldr	r1, [r1, #16]
 800647a:	eba5 0901 	sub.w	r9, r5, r1
 800647e:	6965      	ldr	r5, [r4, #20]
 8006480:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006484:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006488:	3301      	adds	r3, #1
 800648a:	444b      	add	r3, r9
 800648c:	106d      	asrs	r5, r5, #1
 800648e:	429d      	cmp	r5, r3
 8006490:	bf38      	it	cc
 8006492:	461d      	movcc	r5, r3
 8006494:	0553      	lsls	r3, r2, #21
 8006496:	d531      	bpl.n	80064fc <__ssputs_r+0xa0>
 8006498:	4629      	mov	r1, r5
 800649a:	f000 fb47 	bl	8006b2c <_malloc_r>
 800649e:	4606      	mov	r6, r0
 80064a0:	b950      	cbnz	r0, 80064b8 <__ssputs_r+0x5c>
 80064a2:	230c      	movs	r3, #12
 80064a4:	f8ca 3000 	str.w	r3, [sl]
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ae:	81a3      	strh	r3, [r4, #12]
 80064b0:	f04f 30ff 	mov.w	r0, #4294967295
 80064b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b8:	6921      	ldr	r1, [r4, #16]
 80064ba:	464a      	mov	r2, r9
 80064bc:	f000 fabe 	bl	8006a3c <memcpy>
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ca:	81a3      	strh	r3, [r4, #12]
 80064cc:	6126      	str	r6, [r4, #16]
 80064ce:	6165      	str	r5, [r4, #20]
 80064d0:	444e      	add	r6, r9
 80064d2:	eba5 0509 	sub.w	r5, r5, r9
 80064d6:	6026      	str	r6, [r4, #0]
 80064d8:	60a5      	str	r5, [r4, #8]
 80064da:	463e      	mov	r6, r7
 80064dc:	42be      	cmp	r6, r7
 80064de:	d900      	bls.n	80064e2 <__ssputs_r+0x86>
 80064e0:	463e      	mov	r6, r7
 80064e2:	4632      	mov	r2, r6
 80064e4:	6820      	ldr	r0, [r4, #0]
 80064e6:	4641      	mov	r1, r8
 80064e8:	f000 fab6 	bl	8006a58 <memmove>
 80064ec:	68a3      	ldr	r3, [r4, #8]
 80064ee:	6822      	ldr	r2, [r4, #0]
 80064f0:	1b9b      	subs	r3, r3, r6
 80064f2:	4432      	add	r2, r6
 80064f4:	60a3      	str	r3, [r4, #8]
 80064f6:	6022      	str	r2, [r4, #0]
 80064f8:	2000      	movs	r0, #0
 80064fa:	e7db      	b.n	80064b4 <__ssputs_r+0x58>
 80064fc:	462a      	mov	r2, r5
 80064fe:	f000 fb6f 	bl	8006be0 <_realloc_r>
 8006502:	4606      	mov	r6, r0
 8006504:	2800      	cmp	r0, #0
 8006506:	d1e1      	bne.n	80064cc <__ssputs_r+0x70>
 8006508:	6921      	ldr	r1, [r4, #16]
 800650a:	4650      	mov	r0, sl
 800650c:	f000 fabe 	bl	8006a8c <_free_r>
 8006510:	e7c7      	b.n	80064a2 <__ssputs_r+0x46>
	...

08006514 <_svfiprintf_r>:
 8006514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006518:	4698      	mov	r8, r3
 800651a:	898b      	ldrh	r3, [r1, #12]
 800651c:	061b      	lsls	r3, r3, #24
 800651e:	b09d      	sub	sp, #116	; 0x74
 8006520:	4607      	mov	r7, r0
 8006522:	460d      	mov	r5, r1
 8006524:	4614      	mov	r4, r2
 8006526:	d50e      	bpl.n	8006546 <_svfiprintf_r+0x32>
 8006528:	690b      	ldr	r3, [r1, #16]
 800652a:	b963      	cbnz	r3, 8006546 <_svfiprintf_r+0x32>
 800652c:	2140      	movs	r1, #64	; 0x40
 800652e:	f000 fafd 	bl	8006b2c <_malloc_r>
 8006532:	6028      	str	r0, [r5, #0]
 8006534:	6128      	str	r0, [r5, #16]
 8006536:	b920      	cbnz	r0, 8006542 <_svfiprintf_r+0x2e>
 8006538:	230c      	movs	r3, #12
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	f04f 30ff 	mov.w	r0, #4294967295
 8006540:	e0d1      	b.n	80066e6 <_svfiprintf_r+0x1d2>
 8006542:	2340      	movs	r3, #64	; 0x40
 8006544:	616b      	str	r3, [r5, #20]
 8006546:	2300      	movs	r3, #0
 8006548:	9309      	str	r3, [sp, #36]	; 0x24
 800654a:	2320      	movs	r3, #32
 800654c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006550:	f8cd 800c 	str.w	r8, [sp, #12]
 8006554:	2330      	movs	r3, #48	; 0x30
 8006556:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006700 <_svfiprintf_r+0x1ec>
 800655a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800655e:	f04f 0901 	mov.w	r9, #1
 8006562:	4623      	mov	r3, r4
 8006564:	469a      	mov	sl, r3
 8006566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800656a:	b10a      	cbz	r2, 8006570 <_svfiprintf_r+0x5c>
 800656c:	2a25      	cmp	r2, #37	; 0x25
 800656e:	d1f9      	bne.n	8006564 <_svfiprintf_r+0x50>
 8006570:	ebba 0b04 	subs.w	fp, sl, r4
 8006574:	d00b      	beq.n	800658e <_svfiprintf_r+0x7a>
 8006576:	465b      	mov	r3, fp
 8006578:	4622      	mov	r2, r4
 800657a:	4629      	mov	r1, r5
 800657c:	4638      	mov	r0, r7
 800657e:	f7ff ff6d 	bl	800645c <__ssputs_r>
 8006582:	3001      	adds	r0, #1
 8006584:	f000 80aa 	beq.w	80066dc <_svfiprintf_r+0x1c8>
 8006588:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800658a:	445a      	add	r2, fp
 800658c:	9209      	str	r2, [sp, #36]	; 0x24
 800658e:	f89a 3000 	ldrb.w	r3, [sl]
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 80a2 	beq.w	80066dc <_svfiprintf_r+0x1c8>
 8006598:	2300      	movs	r3, #0
 800659a:	f04f 32ff 	mov.w	r2, #4294967295
 800659e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065a2:	f10a 0a01 	add.w	sl, sl, #1
 80065a6:	9304      	str	r3, [sp, #16]
 80065a8:	9307      	str	r3, [sp, #28]
 80065aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065ae:	931a      	str	r3, [sp, #104]	; 0x68
 80065b0:	4654      	mov	r4, sl
 80065b2:	2205      	movs	r2, #5
 80065b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b8:	4851      	ldr	r0, [pc, #324]	; (8006700 <_svfiprintf_r+0x1ec>)
 80065ba:	f7f9 fe11 	bl	80001e0 <memchr>
 80065be:	9a04      	ldr	r2, [sp, #16]
 80065c0:	b9d8      	cbnz	r0, 80065fa <_svfiprintf_r+0xe6>
 80065c2:	06d0      	lsls	r0, r2, #27
 80065c4:	bf44      	itt	mi
 80065c6:	2320      	movmi	r3, #32
 80065c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065cc:	0711      	lsls	r1, r2, #28
 80065ce:	bf44      	itt	mi
 80065d0:	232b      	movmi	r3, #43	; 0x2b
 80065d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065d6:	f89a 3000 	ldrb.w	r3, [sl]
 80065da:	2b2a      	cmp	r3, #42	; 0x2a
 80065dc:	d015      	beq.n	800660a <_svfiprintf_r+0xf6>
 80065de:	9a07      	ldr	r2, [sp, #28]
 80065e0:	4654      	mov	r4, sl
 80065e2:	2000      	movs	r0, #0
 80065e4:	f04f 0c0a 	mov.w	ip, #10
 80065e8:	4621      	mov	r1, r4
 80065ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ee:	3b30      	subs	r3, #48	; 0x30
 80065f0:	2b09      	cmp	r3, #9
 80065f2:	d94e      	bls.n	8006692 <_svfiprintf_r+0x17e>
 80065f4:	b1b0      	cbz	r0, 8006624 <_svfiprintf_r+0x110>
 80065f6:	9207      	str	r2, [sp, #28]
 80065f8:	e014      	b.n	8006624 <_svfiprintf_r+0x110>
 80065fa:	eba0 0308 	sub.w	r3, r0, r8
 80065fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006602:	4313      	orrs	r3, r2
 8006604:	9304      	str	r3, [sp, #16]
 8006606:	46a2      	mov	sl, r4
 8006608:	e7d2      	b.n	80065b0 <_svfiprintf_r+0x9c>
 800660a:	9b03      	ldr	r3, [sp, #12]
 800660c:	1d19      	adds	r1, r3, #4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	9103      	str	r1, [sp, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	bfbb      	ittet	lt
 8006616:	425b      	neglt	r3, r3
 8006618:	f042 0202 	orrlt.w	r2, r2, #2
 800661c:	9307      	strge	r3, [sp, #28]
 800661e:	9307      	strlt	r3, [sp, #28]
 8006620:	bfb8      	it	lt
 8006622:	9204      	strlt	r2, [sp, #16]
 8006624:	7823      	ldrb	r3, [r4, #0]
 8006626:	2b2e      	cmp	r3, #46	; 0x2e
 8006628:	d10c      	bne.n	8006644 <_svfiprintf_r+0x130>
 800662a:	7863      	ldrb	r3, [r4, #1]
 800662c:	2b2a      	cmp	r3, #42	; 0x2a
 800662e:	d135      	bne.n	800669c <_svfiprintf_r+0x188>
 8006630:	9b03      	ldr	r3, [sp, #12]
 8006632:	1d1a      	adds	r2, r3, #4
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	9203      	str	r2, [sp, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	bfb8      	it	lt
 800663c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006640:	3402      	adds	r4, #2
 8006642:	9305      	str	r3, [sp, #20]
 8006644:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006710 <_svfiprintf_r+0x1fc>
 8006648:	7821      	ldrb	r1, [r4, #0]
 800664a:	2203      	movs	r2, #3
 800664c:	4650      	mov	r0, sl
 800664e:	f7f9 fdc7 	bl	80001e0 <memchr>
 8006652:	b140      	cbz	r0, 8006666 <_svfiprintf_r+0x152>
 8006654:	2340      	movs	r3, #64	; 0x40
 8006656:	eba0 000a 	sub.w	r0, r0, sl
 800665a:	fa03 f000 	lsl.w	r0, r3, r0
 800665e:	9b04      	ldr	r3, [sp, #16]
 8006660:	4303      	orrs	r3, r0
 8006662:	3401      	adds	r4, #1
 8006664:	9304      	str	r3, [sp, #16]
 8006666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800666a:	4826      	ldr	r0, [pc, #152]	; (8006704 <_svfiprintf_r+0x1f0>)
 800666c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006670:	2206      	movs	r2, #6
 8006672:	f7f9 fdb5 	bl	80001e0 <memchr>
 8006676:	2800      	cmp	r0, #0
 8006678:	d038      	beq.n	80066ec <_svfiprintf_r+0x1d8>
 800667a:	4b23      	ldr	r3, [pc, #140]	; (8006708 <_svfiprintf_r+0x1f4>)
 800667c:	bb1b      	cbnz	r3, 80066c6 <_svfiprintf_r+0x1b2>
 800667e:	9b03      	ldr	r3, [sp, #12]
 8006680:	3307      	adds	r3, #7
 8006682:	f023 0307 	bic.w	r3, r3, #7
 8006686:	3308      	adds	r3, #8
 8006688:	9303      	str	r3, [sp, #12]
 800668a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800668c:	4433      	add	r3, r6
 800668e:	9309      	str	r3, [sp, #36]	; 0x24
 8006690:	e767      	b.n	8006562 <_svfiprintf_r+0x4e>
 8006692:	fb0c 3202 	mla	r2, ip, r2, r3
 8006696:	460c      	mov	r4, r1
 8006698:	2001      	movs	r0, #1
 800669a:	e7a5      	b.n	80065e8 <_svfiprintf_r+0xd4>
 800669c:	2300      	movs	r3, #0
 800669e:	3401      	adds	r4, #1
 80066a0:	9305      	str	r3, [sp, #20]
 80066a2:	4619      	mov	r1, r3
 80066a4:	f04f 0c0a 	mov.w	ip, #10
 80066a8:	4620      	mov	r0, r4
 80066aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066ae:	3a30      	subs	r2, #48	; 0x30
 80066b0:	2a09      	cmp	r2, #9
 80066b2:	d903      	bls.n	80066bc <_svfiprintf_r+0x1a8>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0c5      	beq.n	8006644 <_svfiprintf_r+0x130>
 80066b8:	9105      	str	r1, [sp, #20]
 80066ba:	e7c3      	b.n	8006644 <_svfiprintf_r+0x130>
 80066bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80066c0:	4604      	mov	r4, r0
 80066c2:	2301      	movs	r3, #1
 80066c4:	e7f0      	b.n	80066a8 <_svfiprintf_r+0x194>
 80066c6:	ab03      	add	r3, sp, #12
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	462a      	mov	r2, r5
 80066cc:	4b0f      	ldr	r3, [pc, #60]	; (800670c <_svfiprintf_r+0x1f8>)
 80066ce:	a904      	add	r1, sp, #16
 80066d0:	4638      	mov	r0, r7
 80066d2:	f3af 8000 	nop.w
 80066d6:	1c42      	adds	r2, r0, #1
 80066d8:	4606      	mov	r6, r0
 80066da:	d1d6      	bne.n	800668a <_svfiprintf_r+0x176>
 80066dc:	89ab      	ldrh	r3, [r5, #12]
 80066de:	065b      	lsls	r3, r3, #25
 80066e0:	f53f af2c 	bmi.w	800653c <_svfiprintf_r+0x28>
 80066e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066e6:	b01d      	add	sp, #116	; 0x74
 80066e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ec:	ab03      	add	r3, sp, #12
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	462a      	mov	r2, r5
 80066f2:	4b06      	ldr	r3, [pc, #24]	; (800670c <_svfiprintf_r+0x1f8>)
 80066f4:	a904      	add	r1, sp, #16
 80066f6:	4638      	mov	r0, r7
 80066f8:	f000 f87a 	bl	80067f0 <_printf_i>
 80066fc:	e7eb      	b.n	80066d6 <_svfiprintf_r+0x1c2>
 80066fe:	bf00      	nop
 8006700:	08006d24 	.word	0x08006d24
 8006704:	08006d2e 	.word	0x08006d2e
 8006708:	00000000 	.word	0x00000000
 800670c:	0800645d 	.word	0x0800645d
 8006710:	08006d2a 	.word	0x08006d2a

08006714 <_printf_common>:
 8006714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006718:	4616      	mov	r6, r2
 800671a:	4699      	mov	r9, r3
 800671c:	688a      	ldr	r2, [r1, #8]
 800671e:	690b      	ldr	r3, [r1, #16]
 8006720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006724:	4293      	cmp	r3, r2
 8006726:	bfb8      	it	lt
 8006728:	4613      	movlt	r3, r2
 800672a:	6033      	str	r3, [r6, #0]
 800672c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006730:	4607      	mov	r7, r0
 8006732:	460c      	mov	r4, r1
 8006734:	b10a      	cbz	r2, 800673a <_printf_common+0x26>
 8006736:	3301      	adds	r3, #1
 8006738:	6033      	str	r3, [r6, #0]
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	0699      	lsls	r1, r3, #26
 800673e:	bf42      	ittt	mi
 8006740:	6833      	ldrmi	r3, [r6, #0]
 8006742:	3302      	addmi	r3, #2
 8006744:	6033      	strmi	r3, [r6, #0]
 8006746:	6825      	ldr	r5, [r4, #0]
 8006748:	f015 0506 	ands.w	r5, r5, #6
 800674c:	d106      	bne.n	800675c <_printf_common+0x48>
 800674e:	f104 0a19 	add.w	sl, r4, #25
 8006752:	68e3      	ldr	r3, [r4, #12]
 8006754:	6832      	ldr	r2, [r6, #0]
 8006756:	1a9b      	subs	r3, r3, r2
 8006758:	42ab      	cmp	r3, r5
 800675a:	dc26      	bgt.n	80067aa <_printf_common+0x96>
 800675c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006760:	1e13      	subs	r3, r2, #0
 8006762:	6822      	ldr	r2, [r4, #0]
 8006764:	bf18      	it	ne
 8006766:	2301      	movne	r3, #1
 8006768:	0692      	lsls	r2, r2, #26
 800676a:	d42b      	bmi.n	80067c4 <_printf_common+0xb0>
 800676c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006770:	4649      	mov	r1, r9
 8006772:	4638      	mov	r0, r7
 8006774:	47c0      	blx	r8
 8006776:	3001      	adds	r0, #1
 8006778:	d01e      	beq.n	80067b8 <_printf_common+0xa4>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	68e5      	ldr	r5, [r4, #12]
 800677e:	6832      	ldr	r2, [r6, #0]
 8006780:	f003 0306 	and.w	r3, r3, #6
 8006784:	2b04      	cmp	r3, #4
 8006786:	bf08      	it	eq
 8006788:	1aad      	subeq	r5, r5, r2
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	6922      	ldr	r2, [r4, #16]
 800678e:	bf0c      	ite	eq
 8006790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006794:	2500      	movne	r5, #0
 8006796:	4293      	cmp	r3, r2
 8006798:	bfc4      	itt	gt
 800679a:	1a9b      	subgt	r3, r3, r2
 800679c:	18ed      	addgt	r5, r5, r3
 800679e:	2600      	movs	r6, #0
 80067a0:	341a      	adds	r4, #26
 80067a2:	42b5      	cmp	r5, r6
 80067a4:	d11a      	bne.n	80067dc <_printf_common+0xc8>
 80067a6:	2000      	movs	r0, #0
 80067a8:	e008      	b.n	80067bc <_printf_common+0xa8>
 80067aa:	2301      	movs	r3, #1
 80067ac:	4652      	mov	r2, sl
 80067ae:	4649      	mov	r1, r9
 80067b0:	4638      	mov	r0, r7
 80067b2:	47c0      	blx	r8
 80067b4:	3001      	adds	r0, #1
 80067b6:	d103      	bne.n	80067c0 <_printf_common+0xac>
 80067b8:	f04f 30ff 	mov.w	r0, #4294967295
 80067bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c0:	3501      	adds	r5, #1
 80067c2:	e7c6      	b.n	8006752 <_printf_common+0x3e>
 80067c4:	18e1      	adds	r1, r4, r3
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	2030      	movs	r0, #48	; 0x30
 80067ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067ce:	4422      	add	r2, r4
 80067d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067d8:	3302      	adds	r3, #2
 80067da:	e7c7      	b.n	800676c <_printf_common+0x58>
 80067dc:	2301      	movs	r3, #1
 80067de:	4622      	mov	r2, r4
 80067e0:	4649      	mov	r1, r9
 80067e2:	4638      	mov	r0, r7
 80067e4:	47c0      	blx	r8
 80067e6:	3001      	adds	r0, #1
 80067e8:	d0e6      	beq.n	80067b8 <_printf_common+0xa4>
 80067ea:	3601      	adds	r6, #1
 80067ec:	e7d9      	b.n	80067a2 <_printf_common+0x8e>
	...

080067f0 <_printf_i>:
 80067f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f4:	460c      	mov	r4, r1
 80067f6:	4691      	mov	r9, r2
 80067f8:	7e27      	ldrb	r7, [r4, #24]
 80067fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80067fc:	2f78      	cmp	r7, #120	; 0x78
 80067fe:	4680      	mov	r8, r0
 8006800:	469a      	mov	sl, r3
 8006802:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006806:	d807      	bhi.n	8006818 <_printf_i+0x28>
 8006808:	2f62      	cmp	r7, #98	; 0x62
 800680a:	d80a      	bhi.n	8006822 <_printf_i+0x32>
 800680c:	2f00      	cmp	r7, #0
 800680e:	f000 80d8 	beq.w	80069c2 <_printf_i+0x1d2>
 8006812:	2f58      	cmp	r7, #88	; 0x58
 8006814:	f000 80a3 	beq.w	800695e <_printf_i+0x16e>
 8006818:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800681c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006820:	e03a      	b.n	8006898 <_printf_i+0xa8>
 8006822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006826:	2b15      	cmp	r3, #21
 8006828:	d8f6      	bhi.n	8006818 <_printf_i+0x28>
 800682a:	a001      	add	r0, pc, #4	; (adr r0, 8006830 <_printf_i+0x40>)
 800682c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006830:	08006889 	.word	0x08006889
 8006834:	0800689d 	.word	0x0800689d
 8006838:	08006819 	.word	0x08006819
 800683c:	08006819 	.word	0x08006819
 8006840:	08006819 	.word	0x08006819
 8006844:	08006819 	.word	0x08006819
 8006848:	0800689d 	.word	0x0800689d
 800684c:	08006819 	.word	0x08006819
 8006850:	08006819 	.word	0x08006819
 8006854:	08006819 	.word	0x08006819
 8006858:	08006819 	.word	0x08006819
 800685c:	080069a9 	.word	0x080069a9
 8006860:	080068cd 	.word	0x080068cd
 8006864:	0800698b 	.word	0x0800698b
 8006868:	08006819 	.word	0x08006819
 800686c:	08006819 	.word	0x08006819
 8006870:	080069cb 	.word	0x080069cb
 8006874:	08006819 	.word	0x08006819
 8006878:	080068cd 	.word	0x080068cd
 800687c:	08006819 	.word	0x08006819
 8006880:	08006819 	.word	0x08006819
 8006884:	08006993 	.word	0x08006993
 8006888:	680b      	ldr	r3, [r1, #0]
 800688a:	1d1a      	adds	r2, r3, #4
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	600a      	str	r2, [r1, #0]
 8006890:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006898:	2301      	movs	r3, #1
 800689a:	e0a3      	b.n	80069e4 <_printf_i+0x1f4>
 800689c:	6825      	ldr	r5, [r4, #0]
 800689e:	6808      	ldr	r0, [r1, #0]
 80068a0:	062e      	lsls	r6, r5, #24
 80068a2:	f100 0304 	add.w	r3, r0, #4
 80068a6:	d50a      	bpl.n	80068be <_printf_i+0xce>
 80068a8:	6805      	ldr	r5, [r0, #0]
 80068aa:	600b      	str	r3, [r1, #0]
 80068ac:	2d00      	cmp	r5, #0
 80068ae:	da03      	bge.n	80068b8 <_printf_i+0xc8>
 80068b0:	232d      	movs	r3, #45	; 0x2d
 80068b2:	426d      	negs	r5, r5
 80068b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b8:	485e      	ldr	r0, [pc, #376]	; (8006a34 <_printf_i+0x244>)
 80068ba:	230a      	movs	r3, #10
 80068bc:	e019      	b.n	80068f2 <_printf_i+0x102>
 80068be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80068c2:	6805      	ldr	r5, [r0, #0]
 80068c4:	600b      	str	r3, [r1, #0]
 80068c6:	bf18      	it	ne
 80068c8:	b22d      	sxthne	r5, r5
 80068ca:	e7ef      	b.n	80068ac <_printf_i+0xbc>
 80068cc:	680b      	ldr	r3, [r1, #0]
 80068ce:	6825      	ldr	r5, [r4, #0]
 80068d0:	1d18      	adds	r0, r3, #4
 80068d2:	6008      	str	r0, [r1, #0]
 80068d4:	0628      	lsls	r0, r5, #24
 80068d6:	d501      	bpl.n	80068dc <_printf_i+0xec>
 80068d8:	681d      	ldr	r5, [r3, #0]
 80068da:	e002      	b.n	80068e2 <_printf_i+0xf2>
 80068dc:	0669      	lsls	r1, r5, #25
 80068de:	d5fb      	bpl.n	80068d8 <_printf_i+0xe8>
 80068e0:	881d      	ldrh	r5, [r3, #0]
 80068e2:	4854      	ldr	r0, [pc, #336]	; (8006a34 <_printf_i+0x244>)
 80068e4:	2f6f      	cmp	r7, #111	; 0x6f
 80068e6:	bf0c      	ite	eq
 80068e8:	2308      	moveq	r3, #8
 80068ea:	230a      	movne	r3, #10
 80068ec:	2100      	movs	r1, #0
 80068ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068f2:	6866      	ldr	r6, [r4, #4]
 80068f4:	60a6      	str	r6, [r4, #8]
 80068f6:	2e00      	cmp	r6, #0
 80068f8:	bfa2      	ittt	ge
 80068fa:	6821      	ldrge	r1, [r4, #0]
 80068fc:	f021 0104 	bicge.w	r1, r1, #4
 8006900:	6021      	strge	r1, [r4, #0]
 8006902:	b90d      	cbnz	r5, 8006908 <_printf_i+0x118>
 8006904:	2e00      	cmp	r6, #0
 8006906:	d04d      	beq.n	80069a4 <_printf_i+0x1b4>
 8006908:	4616      	mov	r6, r2
 800690a:	fbb5 f1f3 	udiv	r1, r5, r3
 800690e:	fb03 5711 	mls	r7, r3, r1, r5
 8006912:	5dc7      	ldrb	r7, [r0, r7]
 8006914:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006918:	462f      	mov	r7, r5
 800691a:	42bb      	cmp	r3, r7
 800691c:	460d      	mov	r5, r1
 800691e:	d9f4      	bls.n	800690a <_printf_i+0x11a>
 8006920:	2b08      	cmp	r3, #8
 8006922:	d10b      	bne.n	800693c <_printf_i+0x14c>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	07df      	lsls	r7, r3, #31
 8006928:	d508      	bpl.n	800693c <_printf_i+0x14c>
 800692a:	6923      	ldr	r3, [r4, #16]
 800692c:	6861      	ldr	r1, [r4, #4]
 800692e:	4299      	cmp	r1, r3
 8006930:	bfde      	ittt	le
 8006932:	2330      	movle	r3, #48	; 0x30
 8006934:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006938:	f106 36ff 	addle.w	r6, r6, #4294967295
 800693c:	1b92      	subs	r2, r2, r6
 800693e:	6122      	str	r2, [r4, #16]
 8006940:	f8cd a000 	str.w	sl, [sp]
 8006944:	464b      	mov	r3, r9
 8006946:	aa03      	add	r2, sp, #12
 8006948:	4621      	mov	r1, r4
 800694a:	4640      	mov	r0, r8
 800694c:	f7ff fee2 	bl	8006714 <_printf_common>
 8006950:	3001      	adds	r0, #1
 8006952:	d14c      	bne.n	80069ee <_printf_i+0x1fe>
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	b004      	add	sp, #16
 800695a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800695e:	4835      	ldr	r0, [pc, #212]	; (8006a34 <_printf_i+0x244>)
 8006960:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	680e      	ldr	r6, [r1, #0]
 8006968:	061f      	lsls	r7, r3, #24
 800696a:	f856 5b04 	ldr.w	r5, [r6], #4
 800696e:	600e      	str	r6, [r1, #0]
 8006970:	d514      	bpl.n	800699c <_printf_i+0x1ac>
 8006972:	07d9      	lsls	r1, r3, #31
 8006974:	bf44      	itt	mi
 8006976:	f043 0320 	orrmi.w	r3, r3, #32
 800697a:	6023      	strmi	r3, [r4, #0]
 800697c:	b91d      	cbnz	r5, 8006986 <_printf_i+0x196>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	f023 0320 	bic.w	r3, r3, #32
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	2310      	movs	r3, #16
 8006988:	e7b0      	b.n	80068ec <_printf_i+0xfc>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	f043 0320 	orr.w	r3, r3, #32
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	2378      	movs	r3, #120	; 0x78
 8006994:	4828      	ldr	r0, [pc, #160]	; (8006a38 <_printf_i+0x248>)
 8006996:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800699a:	e7e3      	b.n	8006964 <_printf_i+0x174>
 800699c:	065e      	lsls	r6, r3, #25
 800699e:	bf48      	it	mi
 80069a0:	b2ad      	uxthmi	r5, r5
 80069a2:	e7e6      	b.n	8006972 <_printf_i+0x182>
 80069a4:	4616      	mov	r6, r2
 80069a6:	e7bb      	b.n	8006920 <_printf_i+0x130>
 80069a8:	680b      	ldr	r3, [r1, #0]
 80069aa:	6826      	ldr	r6, [r4, #0]
 80069ac:	6960      	ldr	r0, [r4, #20]
 80069ae:	1d1d      	adds	r5, r3, #4
 80069b0:	600d      	str	r5, [r1, #0]
 80069b2:	0635      	lsls	r5, r6, #24
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	d501      	bpl.n	80069bc <_printf_i+0x1cc>
 80069b8:	6018      	str	r0, [r3, #0]
 80069ba:	e002      	b.n	80069c2 <_printf_i+0x1d2>
 80069bc:	0671      	lsls	r1, r6, #25
 80069be:	d5fb      	bpl.n	80069b8 <_printf_i+0x1c8>
 80069c0:	8018      	strh	r0, [r3, #0]
 80069c2:	2300      	movs	r3, #0
 80069c4:	6123      	str	r3, [r4, #16]
 80069c6:	4616      	mov	r6, r2
 80069c8:	e7ba      	b.n	8006940 <_printf_i+0x150>
 80069ca:	680b      	ldr	r3, [r1, #0]
 80069cc:	1d1a      	adds	r2, r3, #4
 80069ce:	600a      	str	r2, [r1, #0]
 80069d0:	681e      	ldr	r6, [r3, #0]
 80069d2:	6862      	ldr	r2, [r4, #4]
 80069d4:	2100      	movs	r1, #0
 80069d6:	4630      	mov	r0, r6
 80069d8:	f7f9 fc02 	bl	80001e0 <memchr>
 80069dc:	b108      	cbz	r0, 80069e2 <_printf_i+0x1f2>
 80069de:	1b80      	subs	r0, r0, r6
 80069e0:	6060      	str	r0, [r4, #4]
 80069e2:	6863      	ldr	r3, [r4, #4]
 80069e4:	6123      	str	r3, [r4, #16]
 80069e6:	2300      	movs	r3, #0
 80069e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ec:	e7a8      	b.n	8006940 <_printf_i+0x150>
 80069ee:	6923      	ldr	r3, [r4, #16]
 80069f0:	4632      	mov	r2, r6
 80069f2:	4649      	mov	r1, r9
 80069f4:	4640      	mov	r0, r8
 80069f6:	47d0      	blx	sl
 80069f8:	3001      	adds	r0, #1
 80069fa:	d0ab      	beq.n	8006954 <_printf_i+0x164>
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	079b      	lsls	r3, r3, #30
 8006a00:	d413      	bmi.n	8006a2a <_printf_i+0x23a>
 8006a02:	68e0      	ldr	r0, [r4, #12]
 8006a04:	9b03      	ldr	r3, [sp, #12]
 8006a06:	4298      	cmp	r0, r3
 8006a08:	bfb8      	it	lt
 8006a0a:	4618      	movlt	r0, r3
 8006a0c:	e7a4      	b.n	8006958 <_printf_i+0x168>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4632      	mov	r2, r6
 8006a12:	4649      	mov	r1, r9
 8006a14:	4640      	mov	r0, r8
 8006a16:	47d0      	blx	sl
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d09b      	beq.n	8006954 <_printf_i+0x164>
 8006a1c:	3501      	adds	r5, #1
 8006a1e:	68e3      	ldr	r3, [r4, #12]
 8006a20:	9903      	ldr	r1, [sp, #12]
 8006a22:	1a5b      	subs	r3, r3, r1
 8006a24:	42ab      	cmp	r3, r5
 8006a26:	dcf2      	bgt.n	8006a0e <_printf_i+0x21e>
 8006a28:	e7eb      	b.n	8006a02 <_printf_i+0x212>
 8006a2a:	2500      	movs	r5, #0
 8006a2c:	f104 0619 	add.w	r6, r4, #25
 8006a30:	e7f5      	b.n	8006a1e <_printf_i+0x22e>
 8006a32:	bf00      	nop
 8006a34:	08006d35 	.word	0x08006d35
 8006a38:	08006d46 	.word	0x08006d46

08006a3c <memcpy>:
 8006a3c:	440a      	add	r2, r1
 8006a3e:	4291      	cmp	r1, r2
 8006a40:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a44:	d100      	bne.n	8006a48 <memcpy+0xc>
 8006a46:	4770      	bx	lr
 8006a48:	b510      	push	{r4, lr}
 8006a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a52:	4291      	cmp	r1, r2
 8006a54:	d1f9      	bne.n	8006a4a <memcpy+0xe>
 8006a56:	bd10      	pop	{r4, pc}

08006a58 <memmove>:
 8006a58:	4288      	cmp	r0, r1
 8006a5a:	b510      	push	{r4, lr}
 8006a5c:	eb01 0402 	add.w	r4, r1, r2
 8006a60:	d902      	bls.n	8006a68 <memmove+0x10>
 8006a62:	4284      	cmp	r4, r0
 8006a64:	4623      	mov	r3, r4
 8006a66:	d807      	bhi.n	8006a78 <memmove+0x20>
 8006a68:	1e43      	subs	r3, r0, #1
 8006a6a:	42a1      	cmp	r1, r4
 8006a6c:	d008      	beq.n	8006a80 <memmove+0x28>
 8006a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a76:	e7f8      	b.n	8006a6a <memmove+0x12>
 8006a78:	4402      	add	r2, r0
 8006a7a:	4601      	mov	r1, r0
 8006a7c:	428a      	cmp	r2, r1
 8006a7e:	d100      	bne.n	8006a82 <memmove+0x2a>
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a8a:	e7f7      	b.n	8006a7c <memmove+0x24>

08006a8c <_free_r>:
 8006a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a8e:	2900      	cmp	r1, #0
 8006a90:	d048      	beq.n	8006b24 <_free_r+0x98>
 8006a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a96:	9001      	str	r0, [sp, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8006a9e:	bfb8      	it	lt
 8006aa0:	18e4      	addlt	r4, r4, r3
 8006aa2:	f000 f8d3 	bl	8006c4c <__malloc_lock>
 8006aa6:	4a20      	ldr	r2, [pc, #128]	; (8006b28 <_free_r+0x9c>)
 8006aa8:	9801      	ldr	r0, [sp, #4]
 8006aaa:	6813      	ldr	r3, [r2, #0]
 8006aac:	4615      	mov	r5, r2
 8006aae:	b933      	cbnz	r3, 8006abe <_free_r+0x32>
 8006ab0:	6063      	str	r3, [r4, #4]
 8006ab2:	6014      	str	r4, [r2, #0]
 8006ab4:	b003      	add	sp, #12
 8006ab6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006aba:	f000 b8cd 	b.w	8006c58 <__malloc_unlock>
 8006abe:	42a3      	cmp	r3, r4
 8006ac0:	d90b      	bls.n	8006ada <_free_r+0x4e>
 8006ac2:	6821      	ldr	r1, [r4, #0]
 8006ac4:	1862      	adds	r2, r4, r1
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	bf04      	itt	eq
 8006aca:	681a      	ldreq	r2, [r3, #0]
 8006acc:	685b      	ldreq	r3, [r3, #4]
 8006ace:	6063      	str	r3, [r4, #4]
 8006ad0:	bf04      	itt	eq
 8006ad2:	1852      	addeq	r2, r2, r1
 8006ad4:	6022      	streq	r2, [r4, #0]
 8006ad6:	602c      	str	r4, [r5, #0]
 8006ad8:	e7ec      	b.n	8006ab4 <_free_r+0x28>
 8006ada:	461a      	mov	r2, r3
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	b10b      	cbz	r3, 8006ae4 <_free_r+0x58>
 8006ae0:	42a3      	cmp	r3, r4
 8006ae2:	d9fa      	bls.n	8006ada <_free_r+0x4e>
 8006ae4:	6811      	ldr	r1, [r2, #0]
 8006ae6:	1855      	adds	r5, r2, r1
 8006ae8:	42a5      	cmp	r5, r4
 8006aea:	d10b      	bne.n	8006b04 <_free_r+0x78>
 8006aec:	6824      	ldr	r4, [r4, #0]
 8006aee:	4421      	add	r1, r4
 8006af0:	1854      	adds	r4, r2, r1
 8006af2:	42a3      	cmp	r3, r4
 8006af4:	6011      	str	r1, [r2, #0]
 8006af6:	d1dd      	bne.n	8006ab4 <_free_r+0x28>
 8006af8:	681c      	ldr	r4, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	6053      	str	r3, [r2, #4]
 8006afe:	4421      	add	r1, r4
 8006b00:	6011      	str	r1, [r2, #0]
 8006b02:	e7d7      	b.n	8006ab4 <_free_r+0x28>
 8006b04:	d902      	bls.n	8006b0c <_free_r+0x80>
 8006b06:	230c      	movs	r3, #12
 8006b08:	6003      	str	r3, [r0, #0]
 8006b0a:	e7d3      	b.n	8006ab4 <_free_r+0x28>
 8006b0c:	6825      	ldr	r5, [r4, #0]
 8006b0e:	1961      	adds	r1, r4, r5
 8006b10:	428b      	cmp	r3, r1
 8006b12:	bf04      	itt	eq
 8006b14:	6819      	ldreq	r1, [r3, #0]
 8006b16:	685b      	ldreq	r3, [r3, #4]
 8006b18:	6063      	str	r3, [r4, #4]
 8006b1a:	bf04      	itt	eq
 8006b1c:	1949      	addeq	r1, r1, r5
 8006b1e:	6021      	streq	r1, [r4, #0]
 8006b20:	6054      	str	r4, [r2, #4]
 8006b22:	e7c7      	b.n	8006ab4 <_free_r+0x28>
 8006b24:	b003      	add	sp, #12
 8006b26:	bd30      	pop	{r4, r5, pc}
 8006b28:	200000a8 	.word	0x200000a8

08006b2c <_malloc_r>:
 8006b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2e:	1ccd      	adds	r5, r1, #3
 8006b30:	f025 0503 	bic.w	r5, r5, #3
 8006b34:	3508      	adds	r5, #8
 8006b36:	2d0c      	cmp	r5, #12
 8006b38:	bf38      	it	cc
 8006b3a:	250c      	movcc	r5, #12
 8006b3c:	2d00      	cmp	r5, #0
 8006b3e:	4606      	mov	r6, r0
 8006b40:	db01      	blt.n	8006b46 <_malloc_r+0x1a>
 8006b42:	42a9      	cmp	r1, r5
 8006b44:	d903      	bls.n	8006b4e <_malloc_r+0x22>
 8006b46:	230c      	movs	r3, #12
 8006b48:	6033      	str	r3, [r6, #0]
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b4e:	f000 f87d 	bl	8006c4c <__malloc_lock>
 8006b52:	4921      	ldr	r1, [pc, #132]	; (8006bd8 <_malloc_r+0xac>)
 8006b54:	680a      	ldr	r2, [r1, #0]
 8006b56:	4614      	mov	r4, r2
 8006b58:	b99c      	cbnz	r4, 8006b82 <_malloc_r+0x56>
 8006b5a:	4f20      	ldr	r7, [pc, #128]	; (8006bdc <_malloc_r+0xb0>)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	b923      	cbnz	r3, 8006b6a <_malloc_r+0x3e>
 8006b60:	4621      	mov	r1, r4
 8006b62:	4630      	mov	r0, r6
 8006b64:	f000 f862 	bl	8006c2c <_sbrk_r>
 8006b68:	6038      	str	r0, [r7, #0]
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f000 f85d 	bl	8006c2c <_sbrk_r>
 8006b72:	1c43      	adds	r3, r0, #1
 8006b74:	d123      	bne.n	8006bbe <_malloc_r+0x92>
 8006b76:	230c      	movs	r3, #12
 8006b78:	6033      	str	r3, [r6, #0]
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f000 f86c 	bl	8006c58 <__malloc_unlock>
 8006b80:	e7e3      	b.n	8006b4a <_malloc_r+0x1e>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	1b5b      	subs	r3, r3, r5
 8006b86:	d417      	bmi.n	8006bb8 <_malloc_r+0x8c>
 8006b88:	2b0b      	cmp	r3, #11
 8006b8a:	d903      	bls.n	8006b94 <_malloc_r+0x68>
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	441c      	add	r4, r3
 8006b90:	6025      	str	r5, [r4, #0]
 8006b92:	e004      	b.n	8006b9e <_malloc_r+0x72>
 8006b94:	6863      	ldr	r3, [r4, #4]
 8006b96:	42a2      	cmp	r2, r4
 8006b98:	bf0c      	ite	eq
 8006b9a:	600b      	streq	r3, [r1, #0]
 8006b9c:	6053      	strne	r3, [r2, #4]
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f000 f85a 	bl	8006c58 <__malloc_unlock>
 8006ba4:	f104 000b 	add.w	r0, r4, #11
 8006ba8:	1d23      	adds	r3, r4, #4
 8006baa:	f020 0007 	bic.w	r0, r0, #7
 8006bae:	1ac2      	subs	r2, r0, r3
 8006bb0:	d0cc      	beq.n	8006b4c <_malloc_r+0x20>
 8006bb2:	1a1b      	subs	r3, r3, r0
 8006bb4:	50a3      	str	r3, [r4, r2]
 8006bb6:	e7c9      	b.n	8006b4c <_malloc_r+0x20>
 8006bb8:	4622      	mov	r2, r4
 8006bba:	6864      	ldr	r4, [r4, #4]
 8006bbc:	e7cc      	b.n	8006b58 <_malloc_r+0x2c>
 8006bbe:	1cc4      	adds	r4, r0, #3
 8006bc0:	f024 0403 	bic.w	r4, r4, #3
 8006bc4:	42a0      	cmp	r0, r4
 8006bc6:	d0e3      	beq.n	8006b90 <_malloc_r+0x64>
 8006bc8:	1a21      	subs	r1, r4, r0
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f000 f82e 	bl	8006c2c <_sbrk_r>
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d1dd      	bne.n	8006b90 <_malloc_r+0x64>
 8006bd4:	e7cf      	b.n	8006b76 <_malloc_r+0x4a>
 8006bd6:	bf00      	nop
 8006bd8:	200000a8 	.word	0x200000a8
 8006bdc:	200000ac 	.word	0x200000ac

08006be0 <_realloc_r>:
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	4607      	mov	r7, r0
 8006be4:	4614      	mov	r4, r2
 8006be6:	460e      	mov	r6, r1
 8006be8:	b921      	cbnz	r1, 8006bf4 <_realloc_r+0x14>
 8006bea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006bee:	4611      	mov	r1, r2
 8006bf0:	f7ff bf9c 	b.w	8006b2c <_malloc_r>
 8006bf4:	b922      	cbnz	r2, 8006c00 <_realloc_r+0x20>
 8006bf6:	f7ff ff49 	bl	8006a8c <_free_r>
 8006bfa:	4625      	mov	r5, r4
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c00:	f000 f830 	bl	8006c64 <_malloc_usable_size_r>
 8006c04:	42a0      	cmp	r0, r4
 8006c06:	d20f      	bcs.n	8006c28 <_realloc_r+0x48>
 8006c08:	4621      	mov	r1, r4
 8006c0a:	4638      	mov	r0, r7
 8006c0c:	f7ff ff8e 	bl	8006b2c <_malloc_r>
 8006c10:	4605      	mov	r5, r0
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d0f2      	beq.n	8006bfc <_realloc_r+0x1c>
 8006c16:	4631      	mov	r1, r6
 8006c18:	4622      	mov	r2, r4
 8006c1a:	f7ff ff0f 	bl	8006a3c <memcpy>
 8006c1e:	4631      	mov	r1, r6
 8006c20:	4638      	mov	r0, r7
 8006c22:	f7ff ff33 	bl	8006a8c <_free_r>
 8006c26:	e7e9      	b.n	8006bfc <_realloc_r+0x1c>
 8006c28:	4635      	mov	r5, r6
 8006c2a:	e7e7      	b.n	8006bfc <_realloc_r+0x1c>

08006c2c <_sbrk_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4d06      	ldr	r5, [pc, #24]	; (8006c48 <_sbrk_r+0x1c>)
 8006c30:	2300      	movs	r3, #0
 8006c32:	4604      	mov	r4, r0
 8006c34:	4608      	mov	r0, r1
 8006c36:	602b      	str	r3, [r5, #0]
 8006c38:	f7fa fb08 	bl	800124c <_sbrk>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d102      	bne.n	8006c46 <_sbrk_r+0x1a>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	b103      	cbz	r3, 8006c46 <_sbrk_r+0x1a>
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	20000374 	.word	0x20000374

08006c4c <__malloc_lock>:
 8006c4c:	4801      	ldr	r0, [pc, #4]	; (8006c54 <__malloc_lock+0x8>)
 8006c4e:	f000 b811 	b.w	8006c74 <__retarget_lock_acquire_recursive>
 8006c52:	bf00      	nop
 8006c54:	2000037c 	.word	0x2000037c

08006c58 <__malloc_unlock>:
 8006c58:	4801      	ldr	r0, [pc, #4]	; (8006c60 <__malloc_unlock+0x8>)
 8006c5a:	f000 b80c 	b.w	8006c76 <__retarget_lock_release_recursive>
 8006c5e:	bf00      	nop
 8006c60:	2000037c 	.word	0x2000037c

08006c64 <_malloc_usable_size_r>:
 8006c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c68:	1f18      	subs	r0, r3, #4
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	bfbc      	itt	lt
 8006c6e:	580b      	ldrlt	r3, [r1, r0]
 8006c70:	18c0      	addlt	r0, r0, r3
 8006c72:	4770      	bx	lr

08006c74 <__retarget_lock_acquire_recursive>:
 8006c74:	4770      	bx	lr

08006c76 <__retarget_lock_release_recursive>:
 8006c76:	4770      	bx	lr

08006c78 <_init>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	bf00      	nop
 8006c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7e:	bc08      	pop	{r3}
 8006c80:	469e      	mov	lr, r3
 8006c82:	4770      	bx	lr

08006c84 <_fini>:
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	bf00      	nop
 8006c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8a:	bc08      	pop	{r3}
 8006c8c:	469e      	mov	lr, r3
 8006c8e:	4770      	bx	lr
